/* ------------------------------------------------------------------------ */
/* FILE:			H264VLDTables.cpp										*/
/* DESCRIPTION:		BT H.264 VLD Tables file.								*/
/* VERSION:			v2.00													*/
/* DATE:			29 June 2005											*/
/* MODIFIED BY:	ARC International (UK) Limited								*/
/* MODIFIED DATE:	31 March 2006											*/
/*																			*/
/*				 (c) British Telecommunications plc							*/
/*						All rights reserved 2005							*/
/*							COPYRIGHT NOTICE								*/
/*																			*/
/*	British Telecommunications plc owns the sole copyright to this			*/
/*	software. You may not (1) make a copy of this software except for the	*/
/*	purposes of maintaining a single archive copy (2) derive works			*/
/*	herefrom (3) distribute this work to others. This notice is provided	*/
/*  for information and other rights may also apply.						*/
/*																			*/
/* ------------------------------------------------------------------------ */

/*
--------------------------------------------------------------------------------
Include files.
--------------------------------------------------------------------------------
*/
#ifdef I16K_D8K
#pragma Code("codesec3")
#endif

#include "H264Warnings.h"

#include "H264EnumTypes.h"
#include "H264VLDTables.h"

/* ------------------------------------------------------------------------ */
/* NAME:		VLD Tables													*/
/* DESCRIPTION:	These tables are used for decoding variable length codes 
				using the function ByteBufferDecodeCustomVLC.
				Each row of each table contains decimal equivalent of the 
				codeword, and the number of bits in the codeword. For 
				example, the codeword 010 has decimal equivalent 2 and 
				length 3 bits. Each row has a comment containing the code 
				number and the actual codeword.
				The last row of each table is indicated by an entry of 
				END_OF_TABLE and maximum code length.						*/
/* ------------------------------------------------------------------------ */

/* ------------------------------------------------------------------------ */
/* NAME:		coeff_token_vld_tables										*/
/* DESCRIPTION:	There are three tables for luma and one for chroma
				The corresponding coeff_token_value_tables map code number 
				to the number of trailing ones and the total number of 
				non-zero coefficients.
				Four bits of codeword are processed in each iteration. The
				first four bits are used as the index into the table. If 
				length is not H264_UNF_TABLE, the codeword is complete, and 
				has the given length and value. If length is H264_UNF_TABLE, 
				another four bits must be looked up, with index given by 
				code<<4 + the next four bits.
				The second table is used to convert a decoded code number on
				to the number of trailing ones and the total number of 
				non-zero coefficients.										*/
/* ------------------------------------------------------------------------ */

#if !defined(CAVLC_HW_PRESENT) && !defined(CAVLC_MODEL_ON)

const UNSIGNED_SEPTET coeff_token_vld_table0[240][2] =
{
//	{code, length},			//		actual code,	full code
// Root, start index 0
	{  2, H264_UNF_TABLE},	//		0000,				0000
	{  1, H264_UNF_TABLE},	//		0001,				0001
	{  2, 3},				//		001,				0010
	{  2, 3},				//		001,				0011
	{  1, 2},				//		01,					0100
	{  1, 2},				//		01,					0101
	{  1, 2},				//		01,					0110
	{  1, 2},				//		01,					0111
	{  0, 1},				//		1,					1000
	{  0, 1},				//		1,					1001
	{  0, 1},				//		1,					1010
	{  0, 1},				//		1,					1011
	{  0, 1},				//		1,					1100
	{  0, 1},				//		1,					1101
	{  0, 1},				//		1,					1110
	{  0, 1},				//		1,					1111

// Codes starting 0001, index 16
	{  5, 6},				//		0001 00,			0000
	{  5, 6},				//		0001 00,			0001
	{  5, 6},				//		0001 00,			0010
	{  5, 6},				//		0001 00,			0011
	{  4, 6},				//		0001 01,			0100
	{  4, 6},				//		0001 01,			0101
	{  4, 6},				//		0001 01,			0110
	{  4, 6},				//		0001 01,			0111
	{  3, 5},				//		0001 1,				1000
	{  3, 5},				//		0001 1,				1001
	{  3, 5},				//		0001 1,				1010
	{  3, 5},				//		0001 1,				1011
	{  3, 5},				//		0001 1,				1100
	{  3, 5},				//		0001 1,				1101
	{  3, 5},				//		0001 1,				1110
	{  3, 5},				//		0001 1,				1111

// Codes starting 0000, index 32
	{  6, H264_UNF_TABLE},	//		0000 0000,			0000
	{  5, H264_UNF_TABLE},	//		0000 0001,			0001
	{  4, H264_UNF_TABLE},	//		0000 0010,			0010
	{  3, H264_UNF_TABLE},	//		0000 0011,			0011
	{ 12, 8},				//		0000 0100,			0100
	{ 11, 8},				//		0000 0101,			0101
	{ 10, 8},				//		0000 0110,			0110
	{  9, 8},				//		0000 0111,			0111
	{  8, 7},				//		0000 100,			1000
	{  8, 7},				//		0000 100,			1001
	{  7, 7},				//		0000 101,			1010
	{  7, 7},				//		0000 101,			1011
	{  6, 6},				//		0000 11,			1100
	{  6, 6},				//		0000 11,			1101
	{  6, 6},				//		0000 11,			1110
	{  6, 6},				//		0000 11,			1111

// Codes starting 0000 0011, index 48
	{ 14, 9},				//		0000 0011 0,		0000
	{ 14, 9},				//		0000 0011 0,		0001
	{ 14, 9},				//		0000 0011 0,		0010
	{ 14, 9},				//		0000 0011 0,		0011
	{ 14, 9},				//		0000 0011 0,		0100
	{ 14, 9},				//		0000 0011 0,		0101
	{ 14, 9},				//		0000 0011 0,		0110
	{ 14, 9},				//		0000 0011 0,		0111
	{ 13, 9},				//		0000 0011 1,		1000
	{ 13, 9},				//		0000 0011 1,		1001
	{ 13, 9},				//		0000 0011 1,		1010
	{ 13, 9},				//		0000 0011 1,		1011
	{ 13, 9},				//		0000 0011 1,		1100
	{ 13, 9},				//		0000 0011 1,		1101
	{ 13, 9},				//		0000 0011 1,		1110
	{ 13, 9},				//		0000 0011 1,		1111

// Codes starting 0000 0010, index 64
	{ 16, 9},				//		0000 0010 0,		0000
	{ 16, 9},				//		0000 0010 0,		0001
	{ 16, 9},				//		0000 0010 0,		0010
	{ 16, 9},				//		0000 0010 0,		0011
	{ 16, 9},				//		0000 0010 0,		0100
	{ 16, 9},				//		0000 0010 0,		0101
	{ 16, 9},				//		0000 0010 0,		0110
	{ 16, 9},				//		0000 0010 0,		0111
	{ 15, 9},				//		0000 0010 1,		1000
	{ 15, 9},				//		0000 0010 1,		1001
	{ 15, 9},				//		0000 0010 1,		1010
	{ 15, 9},				//		0000 0010 1,		1011
	{ 15, 9},				//		0000 0010 1,		1100
	{ 15, 9},				//		0000 0010 1,		1101
	{ 15, 9},				//		0000 0010 1,		1110
	{ 15, 9},				//		0000 0010 1,		1111

// Codes starting 0000 0001, index 80
	{ 20,10},				//		0000 0001 00,		0000
	{ 20,10},				//		0000 0001 00,		0001
	{ 20,10},				//		0000 0001 00,		0010
	{ 20,10},				//		0000 0001 00,		0011
	{ 19,10},				//		0000 0001 01,		0100
	{ 19,10},				//		0000 0001 01,		0101
	{ 19,10},				//		0000 0001 01,		0110
	{ 19,10},				//		0000 0001 01,		0111
	{ 18,10},				//		0000 0001 10,		1000
	{ 18,10},				//		0000 0001 10,		1001
	{ 18,10},				//		0000 0001 10,		1010
	{ 18,10},				//		0000 0001 10,		1011
	{ 17,10},				//		0000 0001 11,		1100
	{ 17,10},				//		0000 0001 11,		1101
	{ 17,10},				//		0000 0001 11,		1110
	{ 17,10},				//		0000 0001 11,		1111

// Codes starting 0000 0000, index 96
	{ 14, H264_UNF_TABLE},	//		0000 0000 0000,		0000
	{ 13, H264_UNF_TABLE},	//		0000 0000 0001,		0001
	{ 12, H264_UNF_TABLE},	//		0000 0000 0010,		0010
	{ 11, H264_UNF_TABLE},	//		0000 0000 0011,		0011
	{ 10, H264_UNF_TABLE},	//		0000 0000 0100,		0100
	{  9, H264_UNF_TABLE},	//		0000 0000 0101,		0101
	{  8, H264_UNF_TABLE},	//		0000 0000 0110,		0110
	{  7, H264_UNF_TABLE},	//		0000 0000 0111,		0111
	{ 24,11},				//		0000 0000 100,		1000
	{ 24,11},				//		0000 0000 100,		1001
	{ 23,11},				//		0000 0000 101,		1010
	{ 23,11},				//		0000 0000 101,		1011
	{ 22,11},				//		0000 0000 110,		1100
	{ 22,11},				//		0000 0000 110,		1101
	{ 21,11},				//		0000 0000 111,		1110
	{ 21,11},				//		0000 0000 111,		1111

// Codes starting 0000 0000 0111, index 112
	{ 26,13},				//		0000 0000 0111 0,	0000
	{ 26,13},				//		0000 0000 0111 0,	0001
	{ 26,13},				//		0000 0000 0111 0,	0010
	{ 26,13},				//		0000 0000 0111 0,	0011
	{ 26,13},				//		0000 0000 0111 0,	0100
	{ 26,13},				//		0000 0000 0111 0,	0101
	{ 26,13},				//		0000 0000 0111 0,	0110
	{ 26,13},				//		0000 0000 0111 0,	0111
	{ 25,13},				//		0000 0000 0111 1,	1000
	{ 25,13},				//		0000 0000 0111 1,	1001
	{ 25,13},				//		0000 0000 0111 1,	1010
	{ 25,13},				//		0000 0000 0111 1,	1011
	{ 25,13},				//		0000 0000 0111 1,	1100
	{ 25,13},				//		0000 0000 0111 1,	1101
	{ 25,13},				//		0000 0000 0111 1,	1110
	{ 25,13},				//		0000 0000 0111 1,	1111

// Codes starting 0000 0000 0110, index 128
	{ 28,13},				//		0000 0000 0110 0,	0000
	{ 28,13},				//		0000 0000 0110 0,	0001
	{ 28,13},				//		0000 0000 0110 0,	0010
	{ 28,13},				//		0000 0000 0110 0,	0011
	{ 28,13},				//		0000 0000 0110 0,	0100
	{ 28,13},				//		0000 0000 0110 0,	0101
	{ 28,13},				//		0000 0000 0110 0,	0110
	{ 28,13},				//		0000 0000 0110 0,	0111
	{ 27,13},				//		0000 0000 0110 1,	1000
	{ 27,13},				//		0000 0000 0110 1,	1001
	{ 27,13},				//		0000 0000 0110 1,	1010
	{ 27,13},				//		0000 0000 0110 1,	1011
	{ 27,13},				//		0000 0000 0110 1,	1100
	{ 27,13},				//		0000 0000 0110 1,	1101
	{ 27,13},				//		0000 0000 0110 1,	1110
	{ 27,13},				//		0000 0000 0110 1,	1111

// Codes starting 0000 0000 0101, index 144
	{ 30,13},				//		0000 0000 0101 0,	0000
	{ 30,13},				//		0000 0000 0101 0,	0001
	{ 30,13},				//		0000 0000 0101 0,	0010
	{ 30,13},				//		0000 0000 0101 0,	0011
	{ 30,13},				//		0000 0000 0101 0,	0100
	{ 30,13},				//		0000 0000 0101 0,	0101
	{ 30,13},				//		0000 0000 0101 0,	0110
	{ 30,13},				//		0000 0000 0101 0,	0111
	{ 29,13},				//		0000 0000 0101 1,	1000
	{ 29,13},				//		0000 0000 0101 1,	1001
	{ 29,13},				//		0000 0000 0101 1,	1010
	{ 29,13},				//		0000 0000 0101 1,	1011
	{ 29,13},				//		0000 0000 0101 1,	1100
	{ 29,13},				//		0000 0000 0101 1,	1101
	{ 29,13},				//		0000 0000 0101 1,	1110
	{ 29,13},				//		0000 0000 0101 1,	1111

// Codes starting 0000 0000 0100, index 160
	{ 32,13},				//		0000 0000 0100 0,	0000
	{ 32,13},				//		0000 0000 0100 0,	0001
	{ 32,13},				//		0000 0000 0100 0,	0010
	{ 32,13},				//		0000 0000 0100 0,	0011
	{ 32,13},				//		0000 0000 0100 0,	0100
	{ 32,13},				//		0000 0000 0100 0,	0101
	{ 32,13},				//		0000 0000 0100 0,	0110
	{ 32,13},				//		0000 0000 0100 0,	0111
	{ 31,13},				//		0000 0000 0100 1,	1000
	{ 31,13},				//		0000 0000 0100 1,	1001
	{ 31,13},				//		0000 0000 0100 1,	1010
	{ 31,13},				//		0000 0000 0100 1,	1011
	{ 31,13},				//		0000 0000 0100 1,	1100
	{ 31,13},				//		0000 0000 0100 1,	1101
	{ 31,13},				//		0000 0000 0100 1,	1110
	{ 31,13},				//		0000 0000 0100 1,	1111

// Codes starting 0000 0000 0011, index 176
	{ 36,14},				//		0000 0000 0011 00,	0000
	{ 36,14},				//		0000 0000 0011 00,	0001
	{ 36,14},				//		0000 0000 0011 00,	0010
	{ 36,14},				//		0000 0000 0011 00,	0011
	{ 35,14},				//		0000 0000 0011 01,	0100
	{ 35,14},				//		0000 0000 0011 01,	0101
	{ 35,14},				//		0000 0000 0011 01,	0110
	{ 35,14},				//		0000 0000 0011 01,	0111
	{ 34,14},				//		0000 0000 0011 10,	1000
	{ 34,14},				//		0000 0000 0011 10,	1001
	{ 34,14},				//		0000 0000 0011 10,	1010
	{ 34,14},				//		0000 0000 0011 10,	1011
	{ 33,14},				//		0000 0000 0011 11,	1100
	{ 33,14},				//		0000 0000 0011 11,	1101
	{ 33,14},				//		0000 0000 0011 11,	1110
	{ 33,14},				//		0000 0000 0011 11,	1111

// Codes starting 0000 0000 0010, index 192
	{ 40,14},				//		0000 0000 0010 00,	0000
	{ 40,14},				//		0000 0000 0010 00,	0001
	{ 40,14},				//		0000 0000 0010 00,	0010
	{ 40,14},				//		0000 0000 0010 00,	0011
	{ 39,14},				//		0000 0000 0010 01,	0100
	{ 39,14},				//		0000 0000 0010 01,	0101
	{ 39,14},				//		0000 0000 0010 01,	0110
	{ 39,14},				//		0000 0000 0010 01,	0111
	{ 38,14},				//		0000 0000 0010 10,	1000
	{ 38,14},				//		0000 0000 0010 10,	1001
	{ 38,14},				//		0000 0000 0010 10,	1010
	{ 38,14},				//		0000 0000 0010 10,	1011
	{ 37,14},				//		0000 0000 0010 11,	1100
	{ 37,14},				//		0000 0000 0010 11,	1101
	{ 37,14},				//		0000 0000 0010 11,	1110
	{ 37,14},				//		0000 0000 0010 11,	1111

// Codes starting 0000 0000 0001, index 208
	{ 48,15},				//		0000 0000 0001 000,	0000
	{ 48,15},				//		0000 0000 0001 000,	0001
	{ 47,15},				//		0000 0000 0001 001,	0010
	{ 47,15},				//		0000 0000 0001 001,	0011
	{ 46,15},				//		0000 0000 0001 010,	0100
	{ 46,15},				//		0000 0000 0001 010,	0101
	{ 45,15},				//		0000 0000 0001 011,	0110
	{ 45,15},				//		0000 0000 0001 011,	0111
	{ 44,15},				//		0000 0000 0001 100,	1000
	{ 44,15},				//		0000 0000 0001 100,	1001
	{ 43,15},				//		0000 0000 0001 101,	1010
	{ 43,15},				//		0000 0000 0001 101,	1011
	{ 42,15},				//		0000 0000 0001 110,	1100
	{ 42,15},				//		0000 0000 0001 110,	1101
	{ 41,15},				//		0000 0000 0001 111,	1110
	{ 41,15},				//		0000 0000 0001 111,	1111

// Codes starting 0000 0000 0000, index 224
	{ 61,15},				//		0000 0000 0000 000,		0000  not a codeword
	{ 61,15},				//		0000 0000 0000 000,		0001  not a codeword
	{ 61,15},				//		0000 0000 0000 001,		0010
	{ 61,15},				//		0000 0000 0000 001,		0011
	{ 60,16},				//		0000 0000 0000 0100,	0100
	{ 59,16},				//		0000 0000 0000 0101,	0101
	{ 58,16},				//		0000 0000 0000 0110,	0110
	{ 57,16},				//		0000 0000 0000 0111,	0111
	{ 56,16},				//		0000 0000 0000 1000,	1000
	{ 55,16},				//		0000 0000 0000 1001,	1001
	{ 54,16},				//		0000 0000 0000 1010,	1010
	{ 53,16},				//		0000 0000 0000 1011,	1011
	{ 52,16},				//		0000 0000 0000 1100,	1100
	{ 51,16},				//		0000 0000 0000 1101,	1101
	{ 50,16},				//		0000 0000 0000 1110,	1110
	{ 49,16}				//		0000 0000 0000 1111,	1111

};

const int coeff_token_value_table0[][2] =
{
//  {total coeff, trailing ones},   // index
	{0,0},   // 0
	{1,1},   // 1
	{2,2},   // 2
	{3,3},   // 3
	{1,0},   // 4
	{2,1},   // 5
	{4,3},   // 6
	{3,2},   // 7
	{5,3},   // 8
	{2,0},   // 9
	{3,1},   // 10
	{4,2},   // 11
	{6,3},   // 12
	{3,0},   // 13
	{4,1},   // 14
	{5,2},   // 15
	{7,3},   // 16
	{4,0},   // 17
	{5,1},   // 18
	{6,2},   // 19
	{8,3},   // 20
	{5,0},   // 21
	{6,1},   // 22
	{7,2},   // 23
	{9,3},   // 24
	{6,0},   // 25
	{7,1},   // 26
	{8,2},   // 27
	{10,3},  // 28
	{7,0},   // 29
	{8,1},   // 30
	{9,2},   // 31
	{8,0},   // 32
	{9,0},   // 33
	{9,1},   // 34
	{10,2},  // 35
	{11,3},  // 36
	{10,0},  // 37
	{10,1},  // 38
	{11,2},  // 39
	{12,3},  // 40
	{11,0},  // 41
	{11,1},  // 42
	{12,2},  // 43
	{13,3},  // 44
	{12,0},  // 45
	{12,1},  // 46
	{13,2},  // 47
	{14,3},  // 48
	{13,0},  // 49
	{14,1},  // 50
	{14,2},  // 51
	{15,3},  // 52
	{14,0},  // 53
	{15,1},  // 54
	{15,2},  // 55
	{16,3},  // 56
	{15,0},  // 57
	{16,1},  // 58
	{16,2},  // 59
	{16,0},  // 60
	{13,1},  // 61
};

// ------------------------------------------------------------------------

const UNSIGNED_SEPTET coeff_token_vld_table1[256][2] =
{
//	{code, length},			//		actual code,	full code
// Root, start index 0
	{  4, H264_UNF_TABLE},	//		0000,				0000
	{  3, H264_UNF_TABLE},	//		0001,				0001
	{  2, H264_UNF_TABLE},	//		0010,				0010
	{  1, H264_UNF_TABLE},	//		0011,				0011
	{  4, 4},				//		0100,				0100
	{  3, 4},				//		0101,				0101
	{  2, 3},				//		011,				0110
	{  2, 3},				//		011,				0111
	{  1, 2},				//		10,					1000
	{  1, 2},				//		10,					1001
	{  1, 2},				//		10,					1010
	{  1, 2},				//		10,					1011
	{  0, 2},				//		11,					1100
	{  0, 2},				//		11,					1101
	{  0, 2},				//		11,					1110
	{  0, 2},				//		11,					1111

// Codes starting 0011, index 16
	{  6, 5},				//		0011 0,				0000
	{  6, 5},				//		0011 0,				0001
	{  6, 5},				//		0011 0,				0010
	{  6, 5},				//		0011 0,				0011
	{  6, 5},				//		0011 0,				0100
	{  6, 5},				//		0011 0,				0101
	{  6, 5},				//		0011 0,				0110
	{  6, 5},				//		0011 0,				0111
	{  5, 5},				//		0011 1,				1000
	{  5, 5},				//		0011 1,				1001
	{  5, 5},				//		0011 1,				1010
	{  5, 5},				//		0011 1,				1011
	{  5, 5},				//		0011 1,				1100
	{  5, 5},				//		0011 1,				1101
	{  5, 5},				//		0011 1,				1110
	{  5, 5},				//		0011 1,				1111

// Codes starting 0010, index 32
	{ 10, 6},				//		0010 00,			0000
	{ 10, 6},				//		0010 00,			0001
	{ 10, 6},				//		0010 00,			0010
	{ 10, 6},				//		0010 00,			0011
	{  9, 6},				//		0010 01,			0100
	{  9, 6},				//		0010 01,			0101
	{  9, 6},				//		0010 01,			0110
	{  9, 6},				//		0010 01,			0111
	{  8, 6},				//		0010 10,			1000
	{  8, 6},				//		0010 10,			1001
	{  8, 6},				//		0010 10,			1010
	{  8, 6},				//		0010 10,			1011
	{  7, 6},				//		0010 11,			1100
	{  7, 6},				//		0010 11,			1101
	{  7, 6},				//		0010 11,			1110
	{  7, 6},				//		0010 11,			1111

// Codes starting 0001, index 48
	{ 14, 6},				//		0001 00,			0000
	{ 14, 6},				//		0001 00,			0001
	{ 14, 6},				//		0001 00,			0010
	{ 14, 6},				//		0001 00,			0011
	{ 13, 6},				//		0001 01,			0100
	{ 13, 6},				//		0001 01,			0101
	{ 13, 6},				//		0001 01,			0110
	{ 13, 6},				//		0001 01,			0111
	{ 12, 6},				//		0001 10,			1000
	{ 12, 6},				//		0001 10,			1001
	{ 12, 6},				//		0001 10,			1010
	{ 12, 6},				//		0001 10,			1011
	{ 11, 6},				//		0001 11,			1100
	{ 11, 6},				//		0001 11,			1101
	{ 11, 6},				//		0001 11,			1110
	{ 11, 6},				//		0001 11,			1111

// Codes starting 0000, index 64
	{  8, H264_UNF_TABLE},	//		0000 0000,			0000
	{  7, H264_UNF_TABLE},	//		0000 0001,			0001
	{  6, H264_UNF_TABLE},	//		0000 0010,			0010
	{  5, H264_UNF_TABLE},	//		0000 0011,			0011
	{ 22, 8},				//		0000 0100,			0100
	{ 21, 8},				//		0000 0101,			0101
	{ 20, 8},				//		0000 0110,			0110
	{ 19, 8},				//		0000 0111,			0111
	{ 18, 7},				//		0000 100,			1000
	{ 18, 7},				//		0000 100,			1001
	{ 17, 7},				//		0000 101,			1010
	{ 17, 7},				//		0000 101,			1011
	{ 16, 7},				//		0000 110,			1100
	{ 16, 7},				//		0000 110,			1101
	{ 15, 7},				//		0000 111,			1110
	{ 15, 7},				//		0000 111,			1111

// Codes starting 0000 0011, index 80
	{ 24, 9},				//		0000 0011 0,		0000
	{ 24, 9},				//		0000 0011 0,		0001
	{ 24, 9},				//		0000 0011 0,		0010
	{ 24, 9},				//		0000 0011 0,		0011
	{ 24, 9},				//		0000 0011 0,		0100
	{ 24, 9},				//		0000 0011 0,		0101
	{ 24, 9},				//		0000 0011 0,		0110
	{ 24, 9},				//		0000 0011 0,		0111
	{ 23, 9},				//		0000 0011 1,		1000
	{ 23, 9},				//		0000 0011 1,		1001
	{ 23, 9},				//		0000 0011 1,		1010
	{ 23, 9},				//		0000 0011 1,		1011
	{ 23, 9},				//		0000 0011 1,		1100
	{ 23, 9},				//		0000 0011 1,		1101
	{ 23, 9},				//		0000 0011 1,		1110
	{ 23, 9},				//		0000 0011 1,		1111

// Codes starting 0000 0010, index 96
	{ 26, 9},				//		0000 0010 0,		0000
	{ 26, 9},				//		0000 0010 0,		0001
	{ 26, 9},				//		0000 0010 0,		0010
	{ 26, 9},				//		0000 0010 0,		0011
	{ 26, 9},				//		0000 0010 0,		0100
	{ 26, 9},				//		0000 0010 0,		0101
	{ 26, 9},				//		0000 0010 0,		0110
	{ 26, 9},				//		0000 0010 0,		0111
	{ 25, 9},				//		0000 0010 1,		1000
	{ 25, 9},				//		0000 0010 1,		1001
	{ 25, 9},				//		0000 0010 1,		1010
	{ 25, 9},				//		0000 0010 1,		1011
	{ 25, 9},				//		0000 0010 1,		1100
	{ 25, 9},				//		0000 0010 1,		1101
	{ 25, 9},				//		0000 0010 1,		1110
	{ 25, 9},				//		0000 0010 1,		1111

// Codes starting 0000 0001, index 112
	{ 34,11},				//		0000 0001 000,		0000
	{ 34,11},				//		0000 0001 000,		0001
	{ 33,11},				//		0000 0001 001,		0010
	{ 33,11},				//		0000 0001 001,		0011
	{ 32,11},				//		0000 0001 010,		0100
	{ 32,11},				//		0000 0001 010,		0101
	{ 31,11},				//		0000 0001 011,		0110
	{ 31,11},				//		0000 0001 011,		0111
	{ 30,11},				//		0000 0001 100,		1000
	{ 30,11},				//		0000 0001 100,		1001
	{ 29,11},				//		0000 0001 101,		1010
	{ 29,11},				//		0000 0001 101,		1011
	{ 28,11},				//		0000 0001 110,		1100
	{ 28,11},				//		0000 0001 110,		1101
	{ 27,11},				//		0000 0001 111,		1110
	{ 27,11},				//		0000 0001 111,		1111

// Codes starting 0000 0000, index 128
	{ 61, 13},				//		0000 0000 0000 1,	0000
	{ 15, H264_UNF_TABLE},	//		0000 0000 0001,		0001
	{ 14, H264_UNF_TABLE},	//		0000 0000 0010,		0010
	{ 13, H264_UNF_TABLE},	//		0000 0000 0011,		0011
	{ 12, H264_UNF_TABLE},	//		0000 0000 0100,		0100
	{ 11, H264_UNF_TABLE},	//		0000 0000 0101,		0101
	{ 10, H264_UNF_TABLE},	//		0000 0000 0110,		0110
	{  9, H264_UNF_TABLE},	//		0000 0000 0111,		0111
	{ 42,12},				//		0000 0000 1000,		1000
	{ 41,12},				//		0000 0000 1001,		1001
	{ 40,12},				//		0000 0000 1010,		1010
	{ 39,12},				//		0000 0000 1011,		1011
	{ 38,12},				//		0000 0000 1100,		1100
	{ 37,12},				//		0000 0000 1101,		1101
	{ 36,12},				//		0000 0000 1110,		1110
	{ 35,12},				//		0000 0000 1111,		1111

// Codes starting 0000 0000 0111, index 144
	{ 44,13},				//		0000 0000 0111 0,	0000
	{ 44,13},				//		0000 0000 0111 0,	0001
	{ 44,13},				//		0000 0000 0111 0,	0010
	{ 44,13},				//		0000 0000 0111 0,	0011
	{ 44,13},				//		0000 0000 0111 0,	0100
	{ 44,13},				//		0000 0000 0111 0,	0101
	{ 44,13},				//		0000 0000 0111 0,	0110
	{ 44,13},				//		0000 0000 0111 0,	0111
	{ 43,13},				//		0000 0000 0111 1,	1000
	{ 43,13},				//		0000 0000 0111 1,	1001
	{ 43,13},				//		0000 0000 0111 1,	1010
	{ 43,13},				//		0000 0000 0111 1,	1011
	{ 43,13},				//		0000 0000 0111 1,	1100
	{ 43,13},				//		0000 0000 0111 1,	1101
	{ 43,13},				//		0000 0000 0111 1,	1110
	{ 43,13},				//		0000 0000 0111 1,	1111

// Codes starting 0000 0000 0110, index 160
	{ 46,13},				//		0000 0000 0110 0,	0000
	{ 46,13},				//		0000 0000 0110 0,	0001
	{ 46,13},				//		0000 0000 0110 0,	0010
	{ 46,13},				//		0000 0000 0110 0,	0011
	{ 46,13},				//		0000 0000 0110 0,	0100
	{ 46,13},				//		0000 0000 0110 0,	0101
	{ 46,13},				//		0000 0000 0110 0,	0110
	{ 46,13},				//		0000 0000 0110 0,	0111
	{ 45,13},				//		0000 0000 0110 1,	1000
	{ 45,13},				//		0000 0000 0110 1,	1001
	{ 45,13},				//		0000 0000 0110 1,	1010
	{ 45,13},				//		0000 0000 0110 1,	1011
	{ 45,13},				//		0000 0000 0110 1,	1100
	{ 45,13},				//		0000 0000 0110 1,	1101
	{ 45,13},				//		0000 0000 0110 1,	1110
	{ 45,13},				//		0000 0000 0110 1,	1111

// Codes starting 0000 0000 0101, index 176
	{ 48,13},				//		0000 0000 0101 0,	0000
	{ 48,13},				//		0000 0000 0101 0,	0001
	{ 48,13},				//		0000 0000 0101 0,	0010
	{ 48,13},				//		0000 0000 0101 0,	0011
	{ 48,13},				//		0000 0000 0101 0,	0100
	{ 48,13},				//		0000 0000 0101 0,	0101
	{ 48,13},				//		0000 0000 0101 0,	0110
	{ 48,13},				//		0000 0000 0101 0,	0111
	{ 47,13},				//		0000 0000 0101 1,	1000
	{ 47,13},				//		0000 0000 0101 1,	1001
	{ 47,13},				//		0000 0000 0101 1,	1010
	{ 47,13},				//		0000 0000 0101 1,	1011
	{ 47,13},				//		0000 0000 0101 1,	1100
	{ 47,13},				//		0000 0000 0101 1,	1101
	{ 47,13},				//		0000 0000 0101 1,	1110
	{ 47,13},				//		0000 0000 0101 1,	1111

// Codes starting 0000 0000 0100, index 192
	{ 50,13},				//		0000 0000 0100 0,	0000
	{ 50,13},				//		0000 0000 0100 0,	0001
	{ 50,13},				//		0000 0000 0100 0,	0010
	{ 50,13},				//		0000 0000 0100 0,	0011
	{ 50,13},				//		0000 0000 0100 0,	0100
	{ 50,13},				//		0000 0000 0100 0,	0101
	{ 50,13},				//		0000 0000 0100 0,	0110
	{ 50,13},				//		0000 0000 0100 0,	0111
	{ 49,13},				//		0000 0000 0100 1,	1000
	{ 49,13},				//		0000 0000 0100 1,	1001
	{ 49,13},				//		0000 0000 0100 1,	1010
	{ 49,13},				//		0000 0000 0100 1,	1011
	{ 49,13},				//		0000 0000 0100 1,	1100
	{ 49,13},				//		0000 0000 0100 1,	1101
	{ 49,13},				//		0000 0000 0100 1,	1110
	{ 49,13},				//		0000 0000 0100 1,	1111

// Codes starting 0000 0000 0011, index 208
	{ 52,13},				//		0000 0000 0011 0,	0000
	{ 52,13},				//		0000 0000 0011 0,	0001
	{ 52,13},				//		0000 0000 0011 0,	0010
	{ 52,13},				//		0000 0000 0011 0,	0011
	{ 52,13},				//		0000 0000 0011 0,	0100
	{ 52,13},				//		0000 0000 0011 0,	0101
	{ 52,13},				//		0000 0000 0011 0,	0110
	{ 52,13},				//		0000 0000 0011 0,	0111
	{ 51,13},				//		0000 0000 0011 1,	1000
	{ 51,13},				//		0000 0000 0011 1,	1001
	{ 51,13},				//		0000 0000 0011 1,	1010
	{ 51,13},				//		0000 0000 0011 1,	1011
	{ 51,13},				//		0000 0000 0011 1,	1100
	{ 51,13},				//		0000 0000 0011 1,	1101
	{ 51,13},				//		0000 0000 0011 1,	1110
	{ 51,13},				//		0000 0000 0011 1,	1111

// Codes starting 0000 0000 0010, index 224
	{ 56,14},				//		0000 0000 0010 00,	0000
	{ 56,14},				//		0000 0000 0010 00,	0001
	{ 56,14},				//		0000 0000 0010 00,	0010
	{ 56,14},				//		0000 0000 0010 00,	0011
	{ 55,14},				//		0000 0000 0010 01,	0100
	{ 55,14},				//		0000 0000 0010 01,	0101
	{ 55,14},				//		0000 0000 0010 01,	0110
	{ 55,14},				//		0000 0000 0010 01,	0111
	{ 54,14},				//		0000 0000 0010 10,	1000
	{ 54,14},				//		0000 0000 0010 10,	1001
	{ 54,14},				//		0000 0000 0010 10,	1010
	{ 54,14},				//		0000 0000 0010 10,	1011
	{ 53,14},				//		0000 0000 0010 11,	1100
	{ 53,14},				//		0000 0000 0010 11,	1101
	{ 53,14},				//		0000 0000 0010 11,	1110
	{ 53,14},				//		0000 0000 0010 11,	1111

// Codes starting 0000 0000 0001, index 240
	{ 60,14},				//		0000 0000 0001 00,	0000
	{ 60,14},				//		0000 0000 0001 00,	0001
	{ 60,14},				//		0000 0000 0001 00,	0010
	{ 60,14},				//		0000 0000 0001 00,	0011
	{ 59,14},				//		0000 0000 0001 01,	0100
	{ 59,14},				//		0000 0000 0001 01,	0101
	{ 59,14},				//		0000 0000 0001 01,	0110
	{ 59,14},				//		0000 0000 0001 01,	0111
	{ 58,14},				//		0000 0000 0001 10,	1000
	{ 58,14},				//		0000 0000 0001 10,	1001
	{ 58,14},				//		0000 0000 0001 10,	1010
	{ 58,14},				//		0000 0000 0001 10,	1011
	{ 57,14},				//		0000 0000 0001 11,	1100
	{ 57,14},				//		0000 0000 0001 11,	1101
	{ 57,14},				//		0000 0000 0001 11,	1110
	{ 57,14}				//		0000 0000 0001 11,	1111
};

const int coeff_token_value_table1[][2] =
{
//  {total coeff, trailing ones},   // index
	{0,0},   // 0
	{1,1},   // 1
	{2,2},   // 2
	{3,3},   // 3
	{4,3},   // 4
	{2,1},   // 5
	{5,3},   // 6
	{1,0},   // 7
	{3,1},   // 8
	{3,2},   // 9
	{6,3},   // 10
	{2,0},   // 11
	{4,1},   // 12
	{4,2},   // 13
	{7,3},   // 14
	{3,0},   // 15
	{5,1},   // 16
	{5,2},   // 17
	{8,3},   // 18
	{4,0},   // 19
	{6,1},   // 20
	{6,2},   // 21
	{5,0},   // 22
	{6,0},   // 23
	{7,1},   // 24
	{7,2},   // 25
	{9,3},   // 26
	{7,0},   // 27
	{8,1},   // 28
	{8,2},   // 29
	{10,3},  // 30
	{8,0},   // 31
	{9,1},   // 32
	{9,2},   // 33
	{11,3},  // 34
	{9,0},   // 35
	{10,1},  // 36
	{10,2},  // 37
	{12,3},  // 38
	{10,0},  // 39
	{11,1},  // 40
	{11,2},  // 41
	{11,0},  // 42
	{12,0},  // 43
	{12,1},  // 44
	{12,2},  // 45
	{13,3},  // 46
	{13,0},  // 47
	{13,1},  // 48
	{13,2},  // 49
	{14,3},  // 50
	{14,0},  // 51
	{14,2},  // 52
	{14,1},  // 53
	{15,2},  // 54
	{15,0},  // 55
	{15,1},  // 56
	{16,0},  // 57
	{16,1},  // 58
	{16,2},  // 59
	{16,3},  // 60
	{15,3},  // 61
};

// ------------------------------------------------------------------------

const UNSIGNED_SEPTET coeff_token_vld_table2[272][2] =
{
//	{code, length},			//		actual code,	full code
// Root, start index 0
	{  8, H264_UNF_TABLE},	//		0000,				0000
	{  7, H264_UNF_TABLE},	//		0001,				0001
	{  6, H264_UNF_TABLE},	//		0010,				0010
	{  5, H264_UNF_TABLE},	//		0011,				0011
	{  4, H264_UNF_TABLE},	//		0100,				0100
	{  3, H264_UNF_TABLE},	//		0101,				0101
	{  2, H264_UNF_TABLE},	//		0110,				0110
	{  1, H264_UNF_TABLE},	//		0111,				0111
	{  7, 4},				//		1000,				1000
	{  6, 4},				//		1001,				1001
	{  5, 4},				//		1010,				1010
	{  4, 4},				//		1011,				1011
	{  3, 4},				//		1100,				1100
	{  2, 4},				//		1101,				1101
	{  1, 4},				//		1110,				1110
	{  0, 4},				//		1111,				1111

// Codes starting 0111, index 16
	{  9, 5},				//		0111 0,				0000
	{  9, 5},				//		0111 0,				0001
	{  9, 5},				//		0111 0,				0010
	{  9, 5},				//		0111 0,				0011
	{  9, 5},				//		0111 0,				0100
	{  9, 5},				//		0111 0,				0101
	{  9, 5},				//		0111 0,				0110
	{  9, 5},				//		0111 0,				0111
	{  8, 5},				//		0111 1,				1000
	{  8, 5},				//		0111 1,				1001
	{  8, 5},				//		0111 1,				1010
	{  8, 5},				//		0111 1,				1011
	{  8, 5},				//		0111 1,				1100
	{  8, 5},				//		0111 1,				1101
	{  8, 5},				//		0111 1,				1110
	{  8, 5},				//		0111 1,				1111

// Codes starting 0110, index 32
	{ 11, 5},				//		011010,				0000
	{ 11, 5},				//		011010,				0001
	{ 11, 5},				//		011010,				0010
	{ 11, 5},				//		011010,				0011
	{ 11, 5},				//		011010,				0100
	{ 11, 5},				//		011010,				0101
	{ 11, 5},				//		011010,				0110
	{ 11, 5},				//		011010,				0111
	{ 10, 5},				//		0110 1,				1000
	{ 10, 5},				//		0110 1,				1001
	{ 10, 5},				//		0110 1,				1010
	{ 10, 5},				//		0110 1,				1011
	{ 10, 5},				//		0110 1,				1100
	{ 10, 5},				//		0110 1,				1101
	{ 10, 5},				//		0110 1,				1110
	{ 10, 5},				//		0110 1,				1111

// Codes starting 0101, index 48
	{ 13, 5},				//		0101 0,				0000
	{ 13, 5},				//		0101 0,				0001
	{ 13, 5},				//		0101 0,				0010
	{ 13, 5},				//		0101 0,				0011
	{ 13, 5},				//		0101 0,				0100
	{ 13, 5},				//		0101 0,				0101
	{ 13, 5},				//		0101 0,				0110
	{ 13, 5},				//		0101 0,				0111
	{ 12, 5},				//		0101 1,				1000
	{ 12, 5},				//		0101 1,				1001
	{ 12, 5},				//		0101 1,				1010
	{ 12, 5},				//		0101 1,				1011
	{ 12, 5},				//		0101 1,				1100
	{ 12, 5},				//		0101 1,				1101
	{ 12, 5},				//		0101 1,				1110
	{ 12, 5},				//		0101 1,				1111

// Codes starting 0100, index 64
	{ 15, 5},				//		0100 0,				0000
	{ 15, 5},				//		0100 0,				0001
	{ 15, 5},				//		0100 0,				0010
	{ 15, 5},				//		0100 0,				0011
	{ 15, 5},				//		0100 0,				0100
	{ 15, 5},				//		0100 0,				0101
	{ 15, 5},				//		0100 0,				0110
	{ 15, 5},				//		0100 0,				0111
	{ 14, 5},				//		0100 1,				1000
	{ 14, 5},				//		0100 1,				1001
	{ 14, 5},				//		0100 1,				1010
	{ 14, 5},				//		0100 1,				1011
	{ 14, 5},				//		0100 1,				1100
	{ 14, 5},				//		0100 1,				1101
	{ 14, 5},				//		0100 1,				1110
	{ 14, 5},				//		0100 1,				1111

// Codes starting 0011, index 80
	{ 19, 6},				//		0011 00,			0000
	{ 19, 6},				//		0011 00,			0001
	{ 19, 6},				//		0011 00,			0010
	{ 19, 6},				//		0011 00,			0011
	{ 18, 6},				//		0011 01,			0100
	{ 18, 6},				//		0011 01,			0101
	{ 18, 6},				//		0011 01,			0110
	{ 18, 6},				//		0011 01,			0111
	{ 17, 6},				//		0011 10,			1000
	{ 17, 6},				//		0011 10,			1001
	{ 17, 6},				//		0011 10,			1010
	{ 17, 6},				//		0011 10,			1011
	{ 16, 6},				//		0011 11,			1100
	{ 16, 6},				//		0011 11,			1101
	{ 16, 6},				//		0011 11,			1110
	{ 16, 6},				//		0011 11,			1111

// Codes starting 0010, index 96
	{ 23, 6},				//		0010 00,			0000
	{ 23, 6},				//		0010 00,			0001
	{ 23, 6},				//		0010 00,			0010
	{ 23, 6},				//		0010 00,			0011
	{ 22, 6},				//		0010 01,			0100
	{ 22, 6},				//		0010 01,			0101
	{ 22, 6},				//		0010 01,			0110
	{ 22, 6},				//		0010 01,			0111
	{ 21, 6},				//		0010 10,			1000
	{ 21, 6},				//		0010 10,			1001
	{ 21, 6},				//		0010 10,			1010
	{ 21, 6},				//		0010 10,			1011
	{ 20, 6},				//		0010 11,			1100
	{ 20, 6},				//		0010 11,			1101
	{ 20, 6},				//		0010 11,			1110
	{ 20, 6},				//		0010 11,			1111

// Codes starting 0001, index 112
	{ 31, 7},				//		0001 000,			0000
	{ 31, 7},				//		0001 000,			0001
	{ 30, 7},				//		0001 001,			0010
	{ 30, 7},				//		0001 001,			0011
	{ 29, 7},				//		0001 010,			0100
	{ 29, 7},				//		0001 010,			0101
	{ 28, 7},				//		0001 011,			0110
	{ 28, 7},				//		0001 011,			0111
	{ 27, 7},				//		0001 100,			1000
	{ 27, 7},				//		0001 100,			1001
	{ 26, 7},				//		0001 101,			1010
	{ 26, 7},				//		0001 101,			1011
	{ 25, 7},				//		0001 110,			1100
	{ 25, 7},				//		0001 110,			1101
	{ 24, 7},				//		0001 111,			1110
	{ 24, 7},				//		0001 111,			1111

// Codes starting 0000, index 128
	{ 16, H264_UNF_TABLE},	//		0000 0000,			0000
	{ 15, H264_UNF_TABLE},	//		0000 0001,			0001
	{ 14, H264_UNF_TABLE},	//		0000 0010,			0010
	{ 13, H264_UNF_TABLE},	//		0000 0011,			0011
	{ 12, H264_UNF_TABLE},	//		0000 0100,			0100
	{ 11, H264_UNF_TABLE},	//		0000 0101,			0101
	{ 10, H264_UNF_TABLE},	//		0000 0110,			0110
	{  9, H264_UNF_TABLE},	//		0000 0111,			0111
	{ 39, 8},				//		0000 1000,			1000
	{ 38, 8},				//		0000 1001,			1001
	{ 37, 8},				//		0000 1010,			1010
	{ 36, 8},				//		0000 1011,			1011
	{ 35, 8},				//		0000 1100,			1100
	{ 34, 8},				//		0000 1101,			1101
	{ 33, 8},				//		0000 1110,			1110
	{ 32, 8},				//		0000 1111,			1111

// Codes starting 0000 0111, index 144
	{ 41, 9},				//		0000 0111 0,		0000
	{ 41, 9},				//		0000 0111 0,		0001
	{ 41, 9},				//		0000 0111 0,		0010
	{ 41, 9},				//		0000 0111 0,		0011
	{ 41, 9},				//		0000 0111 0,		0100
	{ 41, 9},				//		0000 0111 0,		0101
	{ 41, 9},				//		0000 0111 0,		0110
	{ 41, 9},				//		0000 0111 0,		0111
	{ 40, 9},				//		0000 0111 1,		1000
	{ 40, 9},				//		0000 0111 1,		1001
	{ 40, 9},				//		0000 0111 1,		1010
	{ 40, 9},				//		0000 0111 1,		1011
	{ 40, 9},				//		0000 0111 1,		1100
	{ 40, 9},				//		0000 0111 1,		1101
	{ 40, 9},				//		0000 0111 1,		1110
	{ 40, 9},				//		0000 0111 1,		1111

// Codes starting 0000 0110, index 160
	{ 43, 9},				//		0000 0110 0,		0000
	{ 43, 9},				//		0000 0110 0,		0001
	{ 43, 9},				//		0000 0110 0,		0010
	{ 43, 9},				//		0000 0110 0,		0011
	{ 43, 9},				//		0000 0110 0,		0100
	{ 43, 9},				//		0000 0110 0,		0101
	{ 43, 9},				//		0000 0110 0,		0110
	{ 43, 9},				//		0000 0110 0,		0111
	{ 42, 9},				//		0000 0110 1,		1000
	{ 42, 9},				//		0000 0110 1,		1001
	{ 42, 9},				//		0000 0110 1,		1010
	{ 42, 9},				//		0000 0110 1,		1011
	{ 42, 9},				//		0000 0110 1,		1100
	{ 42, 9},				//		0000 0110 1,		1101
	{ 42, 9},				//		0000 0110 1,		1110
	{ 42, 9},				//		0000 0110 1,		1111

// Codes starting 0000 0101, index 176
	{ 45, 9},				//		0000 0101 0,		0000
	{ 45, 9},				//		0000 0101 0,		0001
	{ 45, 9},				//		0000 0101 0,		0010
	{ 45, 9},				//		0000 0101 0,		0011
	{ 45, 9},				//		0000 0101 0,		0100
	{ 45, 9},				//		0000 0101 0,		0101
	{ 45, 9},				//		0000 0101 0,		0110
	{ 45, 9},				//		0000 0101 0,		0111
	{ 44, 9},				//		0000 0101 1,		1000
	{ 44, 9},				//		0000 0101 1,		1001
	{ 44, 9},				//		0000 0101 1,		1010
	{ 44, 9},				//		0000 0101 1,		1011
	{ 44, 9},				//		0000 0101 1,		1100
	{ 44, 9},				//		0000 0101 1,		1101
	{ 44, 9},				//		0000 0101 1,		1110
	{ 44, 9},				//		0000 0101 1,		1111

// Codes starting 0000 0100, index 192
	{ 47, 9},				//		0000 0100 0,		0000
	{ 47, 9},				//		0000 0100 0,		0001
	{ 47, 9},				//		0000 0100 0,		0010
	{ 47, 9},				//		0000 0100 0,		0011
	{ 47, 9},				//		0000 0100 0,		0100
	{ 47, 9},				//		0000 0100 0,		0101
	{ 47, 9},				//		0000 0100 0,		0110
	{ 47, 9},				//		0000 0100 0,		0111
	{ 46, 9},				//		0000 0100 1,		1000
	{ 46, 9},				//		0000 0100 1,		1001
	{ 46, 9},				//		0000 0100 1,		1010
	{ 46, 9},				//		0000 0100 1,		1011
	{ 46, 9},				//		0000 0100 1,		1100
	{ 46, 9},				//		0000 0100 1,		1101
	{ 46, 9},				//		0000 0100 1,		1110
	{ 46, 9},				//		0000 0100 1,		1111

// Codes starting 0000 0011, index 208
	{ 50,10},				//		0000 0011 00,		0000
	{ 50,10},				//		0000 0011 00,		0001
	{ 50,10},				//		0000 0011 00,		0010
	{ 50,10},				//		0000 0011 00,		0011
	{ 49,10},				//		0000 0011 01,		0100
	{ 49,10},				//		0000 0011 01,		0101
	{ 49,10},				//		0000 0011 01,		0110
	{ 49,10},				//		0000 0011 01,		0111
	{ 48, 9},				//		0000 0011 1,		1000
	{ 48, 9},				//		0000 0011 1,		1001
	{ 48, 9},				//		0000 0011 1,		1010
	{ 48, 9},				//		0000 0011 1,		1011
	{ 48, 9},				//		0000 0011 1,		1100
	{ 48, 9},				//		0000 0011 1,		1101
	{ 48, 9},				//		0000 0011 1,		1110
	{ 48, 9},				//		0000 0011 1,		1111

// Codes starting 0000 0010, index 224
	{ 54,10},				//		0000 0010 00,		0000
	{ 54,10},				//		0000 0010 00,		0001
	{ 54,10},				//		0000 0010 00,		0010
	{ 54,10},				//		0000 0010 00,		0011
	{ 53,10},				//		0000 0010 01,		0100
	{ 53,10},				//		0000 0010 01,		0101
	{ 53,10},				//		0000 0010 01,		0110
	{ 53,10},				//		0000 0010 01,		0111
	{ 52,10},				//		0000 0010 10,		1000
	{ 52,10},				//		0000 0010 10,		1001
	{ 52,10},				//		0000 0010 10,		1010
	{ 52,10},				//		0000 0010 10,		1011
	{ 51,10},				//		0000 0010 11,		1100
	{ 51,10},				//		0000 0010 11,		1101
	{ 51,10},				//		0000 0010 11,		1110
	{ 51,10},				//		0000 0010 11,		1111

// Codes starting 0000 0001, index 240
	{ 58,10},				//		0000 0001 00,		0000
	{ 58,10},				//		0000 0001 00,		0001
	{ 58,10},				//		0000 0001 00,		0010
	{ 58,10},				//		0000 0001 00,		0011
	{ 57,10},				//		0000 0001 01,		0100
	{ 57,10},				//		0000 0001 01,		0101
	{ 57,10},				//		0000 0001 01,		0110
	{ 57,10},				//		0000 0001 01,		0111
	{ 56,10},				//		0000 0001 10,		1000
	{ 56,10},				//		0000 0001 10,		1001
	{ 56,10},				//		0000 0001 10,		1010
	{ 56,10},				//		0000 0001 10,		1011
	{ 55,10},				//		0000 0001 11,		1100
	{ 55,10},				//		0000 0001 11,		1101
	{ 55,10},				//		0000 0001 11,		1110
	{ 55,10},				//		0000 0001 11,		1111

// Codes starting 0000 0000, index 256
	{ 61,10},				//		0000 0000 00,		0000  not a codeword
	{ 61,10},				//		0000 0000 00,		0001  not a codeword
	{ 61,10},				//		0000 0000 00,		0010  not a codeword
	{ 61,10},				//		0000 0000 00,		0011  not a codeword
	{ 61,10},				//		0000 0000 01,		0100
	{ 61,10},				//		0000 0000 01,		0101
	{ 61,10},				//		0000 0000 01,		0110
	{ 61,10},				//		0000 0000 01,		0111
	{ 60,10},				//		0000 0000 10,		1000
	{ 60,10},				//		0000 0000 10,		1001
	{ 60,10},				//		0000 0000 10,		1010
	{ 60,10},				//		0000 0000 10,		1011
	{ 59,10},				//		0000 0000 11,		1100
	{ 59,10},				//		0000 0000 11,		1101
	{ 59,10},				//		0000 0000 11,		1110
	{ 59,10},				//		0000 0000 11,		1111

};

const int coeff_token_value_table2[][2] =
{
//  {total coeff, trailing ones},   // index
	{0,0},    // 0
	{1,1},    // 1
	{2,2},    // 2
	{3,3},    // 3
	{4,3},    // 4
	{5,3},    // 5
	{6,3},    // 6
	{7,3},    // 7
	{2,1},    // 8
	{3,2},    // 9
	{8,3},    // 10
	{3,1},    // 11
	{4,2},    // 12
	{4,1},    // 13
	{5,2},    // 14
	{5,1},    // 15
	{1,0},    // 16
	{6,1},    // 17
	{6,2},    // 18
	{9,3},    // 19
	{2,0},    // 20
	{7,1},    // 21
	{7,2},    // 22
	{3,0},    // 23
	{4,0},    // 24
	{8,1},    // 25
	{8,2},    // 26
	{10,3},   // 27
	{5,0},    // 28
	{9,2},    // 29
	{6,0},    // 30
	{7,0},    // 31
	{8,0},    // 32
	{9,1},    // 33
	{10,2},   // 34
	{11,3},   // 35
	{9,0},    // 36
	{10,1},   // 37
	{11,2},   // 38
	{12,3},   // 39
	{10,0},   // 40
	{11,1},   // 41
	{12,2},   // 42
	{13,3},   // 43
	{11,0},   // 44
	{12,1},   // 45
	{13,2},   // 46
	{12,0},   // 47
	{13,1},   // 48
	{13,0},   // 49
	{14,1},   // 50
	{14,2},   // 51
	{14,3},   // 52
	{14,0},   // 53
	{15,1},   // 54
	{15,2},   // 55
	{15,3},   // 56
	{15,0},   // 57
	{16,1},   // 58
	{16,2},   // 59
	{16,3},   // 60
	{16,0},   // 61
};

// ------------------------------------------------------------------------

const UNSIGNED_SEPTET coeff_token_vld_chroma[48][2] =
{
//	{code, length},			//		actual code,	full code
// Root, start index 0
	{  2, H264_UNF_TABLE},	//		0000,				0000
	{  1, H264_UNF_TABLE},	//		0001,				0001
	{  2, 3},				//		001,				0010
	{  2, 3},				//		001,				0011
	{  1, 2},				//		01,					0100
	{  1, 2},				//		01,					0101
	{  1, 2},				//		01,					0110
	{  1, 2},				//		01,					0111
	{  0, 1},				//		1,					1000
	{  0, 1},				//		1,					1001
	{  0, 1},				//		1,					1010
	{  0, 1},				//		1,					1011
	{  0, 1},				//		1,					1100
	{  0, 1},				//		1,					1101
	{  0, 1},				//		1,					1110
	{  0, 1},				//		1,					1111

// Codes starting 0001, index 16
	{  6, 6},				//		0001 00,			0000
	{  6, 6},				//		0001 00,			0001
	{  6, 6},				//		0001 00,			0010
	{  6, 6},				//		0001 00,			0011
	{  5, 6},				//		0001 01,			0100
	{  5, 6},				//		0001 01,			0101
	{  5, 6},				//		0001 01,			0110
	{  5, 6},				//		0001 01,			0111
	{  4, 6},				//		0001 10,			1000
	{  4, 6},				//		0001 10,			1001
	{  4, 6},				//		0001 10,			1010
	{  4, 6},				//		0001 10,			1011
	{  3, 6},				//		0001 11,			1100
	{  3, 6},				//		0001 11,			1101
	{  3, 6},				//		0001 11,			1110
	{  3, 6},				//		0001 11,			1111

// Codes starting 0000, index 32
	{ 11, 7},				//		0000 000,			0000
	{ 11, 7},				//		0000 000,			0001
	{ 13, 8},				//		0000 0010,			0010
	{ 12, 8},				//		0000 0011,			0011
	{ 10, 7},				//		0000 010,			0100
	{ 10, 7},				//		0000 010,			0101
	{  9, 7},				//		0000 011,			0110
	{  9, 7},				//		0000 011,			0111
	{  8, 6},				//		0000 10,			1000
	{  8, 6},				//		0000 10,			1001
	{  8, 6},				//		0000 10,			1010
	{  8, 6},				//		0000 10,			1011
	{  7, 6},				//		0000 11,			1100
	{  7, 6},				//		0000 11,			1101
	{  7, 6},				//		0000 11,			1110
	{  7, 6}				//		0000 11,			1111
};

const int coeff_token_value_chroma[][2] =
{
//  {total coeff, trailing ones},   // index
	{1,1},    // 0
	{0,0},    // 1
	{2,2},    // 2
	{1,0},    // 3
	{2,1},    // 4
	{3,3},    // 5
	{2,0},    // 6
	{3,0},    // 7
	{4,0},    // 8
	{3,1},    // 9
	{3,2},    // 10
	{4,3},    // 11
	{4,1},    // 12
	{4,2},    // 13
};

/* ------------------------------------------------------------------------ */
/* NAME:		level_table_threshold										*/
/* DESCRIPTION:	This table is used to vary the code table used for decoding 
				levels.														*/
/* ------------------------------------------------------------------------ */

const int level_table_threshold[6] = {0, 3, 6, 12, 24, 48};

/* ------------------------------------------------------------------------ */
/* NAME:		total_zeros_coeff tables									*/
/* DESCRIPTION:	There are 15 tables for 4x4 blocks and 3 for 2x2 chroma DC.
				The table number is given by the total number of non-zero 
				coefficients and the code number indicates the total number 
				of (non-trailing) zeros.									*/
/* ------------------------------------------------------------------------ */

const UNSIGNED_SEPTET total_zeros_1_coeff[512][2] =
{
//	{code, length},			//		actual code,	full code
	{16, 9},				//		none,			0 0000 0000
	{15, 9},				//		0 0000 0001,	0 0000 0001
	{14, 9},				//		0 0000 0010,	0 0000 0010
	{13, 9},				//		0 0000 0011,	0 0000 0011
	{12, 8},				//		0 0000 010 ,	0 0000 0100
	{12, 8},				//		0 0000 010 ,	0 0000 0101
	{11, 8},				//		0 0000 011 ,	0 0000 0110
	{11, 8},				//		0 0000 011 ,	0 0000 0111
	{10, 7},				//		0 0000 10  ,	0 0000 1000
	{10, 7},				//		0 0000 10  ,	0 0000 1001
	{10, 7},				//		0 0000 10  ,	0 0000 1010
	{10, 7},				//		0 0000 10  ,	0 0000 1011
	{ 9, 7},				//		0 0000 11  ,	0 0000 1100
	{ 9, 7},				//		0 0000 11  ,	0 0000 1101
	{ 9, 7},				//		0 0000 11  ,	0 0000 1110
	{ 9, 7},				//		0 0000 11  ,	0 0000 1111
	{ 8, 6},				//		0 0001 0   ,	0 0001 0000
	{ 8, 6},				//		0 0001 0   ,	0 0001 0001
	{ 8, 6},				//		0 0001 0   ,	0 0001 0010
	{ 8, 6},				//		0 0001 0   ,	0 0001 0011
	{ 8, 6},				//		0 0001 0   ,	0 0001 0100
	{ 8, 6},				//		0 0001 0   ,	0 0001 0101
	{ 8, 6},				//		0 0001 0   ,	0 0001 0110
	{ 8, 6},				//		0 0001 0   ,	0 0001 0111
	{ 7, 6},				//		0 0001 1   ,	0 0001 1000
	{ 7, 6},				//		0 0001 1   ,	0 0001 1001
	{ 7, 6},				//		0 0001 1   ,	0 0001 1010
	{ 7, 6},				//		0 0001 1   ,	0 0001 1011
	{ 7, 6},				//		0 0001 1   ,	0 0001 1100
	{ 7, 6},				//		0 0001 1   ,	0 0001 1101
	{ 7, 6},				//		0 0001 1   ,	0 0001 1110
	{ 7, 6},				//		0 0001 1   ,	0 0001 1111
	{ 6, 5},				//		0 0010     ,	0 0010 0000
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//
	{ 6, 5},				//		0 0010     ,	0 0010 1111
	{ 5, 5},				//		0 0011     ,	0 0011 0000
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//
	{ 5, 5},				//		0 0011     ,	0 0011 1111
	{ 4, 4},				//		0 010      ,	0 0100 0000
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//
	{ 4, 4},				//		0 010      ,	0 0101 1111
	{ 3, 4},				//		0 011      ,	0 0110 0000
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//
	{ 3, 4},				//		0 011      ,	0 0111 1111
	{ 2, 3},				//		0 10       ,	0 1000 0000
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//		0 10       ,	0 1011 1111
	{ 1, 3},				//		0 11       ,	0 1100 0000
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//		0 11       ,	0 1111 1111
	{ 0, 1},				//		1          ,	1 0000 0000
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1},				//
	{ 0, 1} 				//		1          ,	1 1111 1111
};

const UNSIGNED_SEPTET total_zeros_2_coeff[64][2] =
{
//	{code, length},			//		actual code,	full code
	{14, 6},				//		00 0000,		00 0000
	{13, 6},				//		00 0001,		00 0001
	{12, 6},				//		00 0010,		00 0010
	{11, 6},				//		00 0011,		00 0011
	{10, 5},				//		00 010 ,		00 0100
	{10, 5},				//		00 010 ,		00 0101
	{ 9, 5},				//		00 011 ,		00 0110
	{ 9, 5},				//		00 011 ,		00 0111
	{ 8, 4},				//		00 10  ,		00 1000
	{ 8, 4},				//		00 10  ,		00 1001
	{ 8, 4},				//		00 10  ,		00 1010
	{ 8, 4},				//		00 10  ,		00 1011
	{ 7, 4},				//		00 11  ,		00 1100
	{ 7, 4},				//		00 11  ,		00 1101
	{ 7, 4},				//		00 11  ,		00 1110
	{ 7, 4},				//		00 11  ,		00 1111
	{ 6, 4},				//		01 00  ,		01 0000
	{ 6, 4},				//		01 00  ,		01 0001
	{ 6, 4},				//		01 00  ,		01 0010
	{ 6, 4},				//		01 00  ,		01 0011
	{ 5, 4},				//		01 01  ,		01 0100
	{ 5, 4},				//		01 01  ,		01 0101
	{ 5, 4},				//		01 01  ,		01 0110
	{ 5, 4},				//		01 01  ,		01 0111
	{ 4, 3},				//		01 1   ,		01 1000
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//		01 1   ,		01 1111
	{ 3, 3},				//		10 0   ,		10 0000
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//		10 0   ,		10 0111
	{ 2, 3},				//		10 1   ,		10 1000
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//		10 1   ,		10 1111
	{ 1, 3},				//		11 0   ,		11 0000
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//		11 0   ,		11 0111
	{ 0, 3},				//		11 1   ,		11 1000
	{ 0, 3},				//
	{ 0, 3},				//
	{ 0, 3},				//
	{ 0, 3},				//
	{ 0, 3},				//
	{ 0, 3},				//
	{ 0, 3} 				//		11 1   ,		11 1111
};

const UNSIGNED_SEPTET total_zeros_3_coeff[64][2] =
{
//	{code, length},			//		actual code,	full code
	{13, 6},				//		00 0000,		00 0000
	{11, 6},				//		00 0001,		00 0001
	{12, 5},				//		00 001 ,		00 0010
	{12, 5},				//		00 001 ,		00 0011
	{10, 5},				//		00 010 ,		00 0100
	{10, 5},				//		00 010 ,		00 0101
	{ 9, 5},				//		00 011 ,		00 0110
	{ 9, 5},				//		00 011 ,		00 0111
	{ 8, 4},				//		00 10  ,		00 1000
	{ 8, 4},				//		00 10  ,		00 1001
	{ 8, 4},				//		00 10  ,		00 1010
	{ 8, 4},				//		00 10  ,		00 1011
	{ 5, 4},				//		00 11  ,		00 1100
	{ 5, 4},				//		00 11  ,		00 1101
	{ 5, 4},				//		00 11  ,		00 1110
	{ 5, 4},				//		00 11  ,		00 1111
	{ 4, 4},				//		01 00  ,		01 0000
	{ 4, 4},				//		01 00  ,		01 0001
	{ 4, 4},				//		01 00  ,		01 0010
	{ 4, 4},				//		01 00  ,		01 0011
	{ 0, 4},				//		01 01  ,		01 0100
	{ 0, 4},				//		01 01  ,		01 0101
	{ 0, 4},				//		01 01  ,		01 0110
	{ 0, 4},				//		01 01  ,		01 0111
	{ 7, 3},				//		01 1   ,		01 1000
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//		01 1   ,		01 1111
	{ 6, 3},				//		10 0   ,		10 0000
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//		10 0   ,		10 0111
	{ 3, 3},				//		10 1   ,		10 1000
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//		10 1   ,		10 1111
	{ 2, 3},				//		11 0   ,		11 0000
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//		11 0   ,		11 0111
	{ 1, 3},				//		11 1   ,		11 1000
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3},				//
	{ 1, 3} 				//		11 1   ,		11 1111
};

const UNSIGNED_SEPTET total_zeros_4_coeff[32][2] =
{
//	{code, length},			//		actual code,	full code
	{12, 5},				//		0 0000,			0 0000
	{11, 5},				//		0 0001,			0 0001
	{10, 5},				//		0 0010,			0 0010
	{ 0, 5},				//		0 0011,			0 0011
	{ 9, 4},				//		0 010 ,			0 0100
	{ 9, 4},				//		0 010 ,			0 0101
	{ 7, 4},				//		0 011 ,			0 0110
	{ 7, 4},				//		0 011 ,			0 0111
	{ 3, 4},				//		0 100 ,			0 1000
	{ 3, 4},				//		0 100 ,			0 1001
	{ 2, 4},				//		0 101 ,			0 1010
	{ 2, 4},				//		0 101 ,			0 1011
	{ 8, 3},				//		0 11  ,			0 1100
	{ 8, 3},				//		0 11  ,			0 1101
	{ 8, 3},				//		0 11  ,			0 1110
	{ 8, 3},				//		0 11  ,			0 1111
	{ 6, 3},				//		1 00  ,			1 0000
	{ 6, 3},				//		1 00  ,			1 0001
	{ 6, 3},				//		1 00  ,			1 0010
	{ 6, 3},				//		1 00  ,			1 0011
	{ 5, 3},				//		1 01  ,			1 0100
	{ 5, 3},				//		1 01  ,			1 0101
	{ 5, 3},				//		1 01  ,			1 0110
	{ 5, 3},				//		1 01  ,			1 0111
	{ 4, 3},				//		1 10  ,			1 1000
	{ 4, 3},				//		1 10  ,			1 1001
	{ 4, 3},				//		1 10  ,			1 1010
	{ 4, 3},				//		1 10  ,			1 1011
	{ 1, 3},				//		1 11  ,			1 1100
	{ 1, 3},				//		1 11  ,			1 1101
	{ 1, 3},				//		1 11  ,			1 1110
	{ 1, 3} 				//		1 11  ,			1 1111
};

const UNSIGNED_SEPTET total_zeros_5_coeff[32][2] =
{
//	{code, length},			//		actual code,	full code
	{11, 5},				//		0 0000,			0 0000
	{ 9, 5},				//		0 0001,			0 0001
	{10, 4},				//		0 001 ,			0 0010
	{10, 4},				//		0 001 ,			0 0011
	{ 8, 4},				//		0 010 ,			0 0100
	{ 8, 4},				//		0 010 ,			0 0101
	{ 2, 4},				//		0 011 ,			0 0110
	{ 2, 4},				//		0 011 ,			0 0111
	{ 1, 4},				//		0 100 ,			0 1000
	{ 1, 4},				//		0 100 ,			0 1001
	{ 0, 4},				//		0 101 ,			0 1010
	{ 0, 4},				//		0 101 ,			0 1011
	{ 7, 3},				//		0 11  ,			0 1100
	{ 7, 3},				//		0 11  ,			0 1101
	{ 7, 3},				//		0 11  ,			0 1110
	{ 7, 3},				//		0 11  ,			0 1111
	{ 6, 3},				//		1 00  ,			1 0000
	{ 6, 3},				//		1 00  ,			1 0001
	{ 6, 3},				//		1 00  ,			1 0010
	{ 6, 3},				//		1 00  ,			1 0011
	{ 5, 3},				//		1 01  ,			1 0100
	{ 5, 3},				//		1 01  ,			1 0101
	{ 5, 3},				//		1 01  ,			1 0110
	{ 5, 3},				//		1 01  ,			1 0111
	{ 4, 3},				//		1 10  ,			1 1000
	{ 4, 3},				//		1 10  ,			1 1001
	{ 4, 3},				//		1 10  ,			1 1010
	{ 4, 3},				//		1 10  ,			1 1011
	{ 3, 3},				//		1 11  ,			1 1100
	{ 3, 3},				//		1 11  ,			1 1101
	{ 3, 3},				//		1 11  ,			1 1110
	{ 3, 3} 				//		1 11  ,			1 1111
};

const UNSIGNED_SEPTET total_zeros_6_coeff[64][2] =
{
//	{code, length},			//		actual code,	full code
	{10, 6},				//		00 0000,		00 0000
	{ 0, 6},				//		00 0001,		00 0001
	{ 1, 5},				//		00 001 ,		00 0010
	{ 1, 5},				//		00 001 ,		00 0011
	{ 8, 4},				//		00 01  ,		00 0100
	{ 8, 4},				//		00 01  ,		00 0101
	{ 8, 4},				//		00 01  ,		00 0110
	{ 8, 4},				//		00 01  ,		00 0111
	{ 9, 3},				//		00 1   ,		00 1000
	{ 9, 3},				//
	{ 9, 3},				//
	{ 9, 3},				//
	{ 9, 3},				//
	{ 9, 3},				//
	{ 9, 3},				//
	{ 9, 3},				//		00 1   ,		00 1111
	{ 7, 3},				//		01 0   ,		01 0000
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//		01 0   ,		01 1111
	{ 6, 3},				//		01 1   ,		01 1000
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//		01 1   ,		01 1111
	{ 5, 3},				//		10 0   ,		10 0000
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//		10 0   ,		10 0111
	{ 4, 3},				//		10 1   ,		10 1000
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//		10 1   ,		10 1111
	{ 3, 3},				//		11 0   ,		11 0000
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//		11 0   ,		11 0111
	{ 2, 3},				//		11 1   ,		11 1000
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3} 				//		11 1   ,		11 1111
};

const UNSIGNED_SEPTET total_zeros_7_coeff[64][2] =
{
//	{code, length},			//		actual code,	full code
	{ 9, 6},				//		00 0000,		00 0000
	{ 0, 6},				//		00 0001,		00 0001
	{ 1, 5},				//		00 001 ,		00 0010
	{ 1, 5},				//		00 001 ,		00 0011
	{ 7, 4},				//		00 01  ,		00 0100
	{ 7, 4},				//		00 01  ,		00 0101
	{ 7, 4},				//		00 01  ,		00 0110
	{ 7, 4},				//		00 01  ,		00 0111
	{ 8, 3},				//		00 1   ,		00 1000
	{ 8, 3},				//
	{ 8, 3},				//
	{ 8, 3},				//
	{ 8, 3},				//
	{ 8, 3},				//
	{ 8, 3},				//
	{ 8, 3},				//		00 1   ,		00 1111
	{ 6, 3},				//		01 0   ,		01 0000
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//		01 0   ,		01 1111
	{ 4, 3},				//		01 1   ,		01 1000
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//
	{ 4, 3},				//		01 1   ,		01 1111
	{ 3, 3},				//		10 0   ,		10 0000
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//		10 0   ,		10 0111
	{ 2, 3},				//		10 1   ,		10 1000
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//
	{ 2, 3},				//		10 1   ,		10 1111
	{ 5, 2},				//		11     ,		11 0000
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2} 				//		11     ,		11 1111
};

const UNSIGNED_SEPTET total_zeros_8_coeff[64][2] =
{
//	{code, length},			//		actual code,	full code
	{ 8, 6},				//		00 0000,		00 0000
	{ 0, 6},				//		00 0001,		00 0001
	{ 2, 5},				//		00 001 ,		00 0010
	{ 2, 5},				//		00 001 ,		00 0011
	{ 1, 4},				//		00 01  ,		00 0100
	{ 1, 4},				//		00 01  ,		00 0101
	{ 1, 4},				//		00 01  ,		00 0110
	{ 1, 4},				//		00 01  ,		00 0111
	{ 7, 3},				//		00 1   ,		00 1000
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//
	{ 7, 3},				//		00 1   ,		00 1111
	{ 6, 3},				//		01 0   ,		01 0000
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//
	{ 6, 3},				//		01 0   ,		01 1111
	{ 3, 3},				//		01 1   ,		01 1000
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//
	{ 3, 3},				//		01 1   ,		01 1111
	{ 5, 2},				//		10     ,		10 0000
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//
	{ 5, 2},				//		10     ,		10 1111
	{ 4, 2},				//		11     ,		11 0000
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2} 				//		11     ,		11 1111
};

const UNSIGNED_SEPTET total_zeros_9_coeff[64][2] =
{
//	{code, length},			//		actual code,	full code
	{ 1, 6},				//		00 0000,		00 0000
	{ 0, 6},				//		00 0001,		00 0001
	{ 7, 5},				//		00 001 ,		00 0010
	{ 7, 5},				//		00 001 ,		00 0011
	{ 2, 4},				//		00 01  ,		00 0100
	{ 2, 4},				//		00 01  ,		00 0101
	{ 2, 4},				//		00 01  ,		00 0110
	{ 2, 4},				//		00 01  ,		00 0111
	{ 5, 3},				//		00 1   ,		00 1000
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//
	{ 5, 3},				//		00 1   ,		00 1111
	{ 6, 2},				//		01     ,		01 0000
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//
	{ 6, 2},				//		01     ,		01 1111
	{ 4, 2},				//		10     ,		10 0000
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//
	{ 4, 2},				//		10     ,		10 1111
	{ 3, 2},				//		11     ,		11 0000
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2},				//
	{ 3, 2} 				//		11     ,		11 1111
};

const UNSIGNED_SEPTET total_zeros_10_coeff[32][2] =
{
//	{code, length},			//		actual code,	full code
	{ 1, 5},				//		0 0000,			0 0000
	{ 0, 5},				//		0 0001,			0 0001
	{ 6, 4},				//		0 001 ,			0 0010
	{ 6, 4},				//		0 001 ,			0 0011
	{ 2, 3},				//		0 01  ,			0 0100
	{ 2, 3},				//		0 01  ,			0 0101
	{ 2, 3},				//		0 01  ,			0 0110
	{ 2, 3},				//		0 01  ,			0 0111
	{ 5, 2},				//		0 1 ,			0 1000
	{ 5, 2},				//		0 1 ,			0 1001
	{ 5, 2},				//		0 1 ,			0 1010
	{ 5, 2},				//		0 1 ,			0 1011
	{ 5, 2},				//		0 1   ,			0 1100
	{ 5, 2},				//		0 1   ,			0 1101
	{ 5, 2},				//		0 1   ,			0 1110
	{ 5, 2},				//		0 1   ,			0 1111
	{ 4, 2},				//		1 0   ,			1 0000
	{ 4, 2},				//		1 0   ,			1 0001
	{ 4, 2},				//		1 0   ,			1 0010
	{ 4, 2},				//		1 0   ,			1 0011
	{ 4, 2},				//		1 0   ,			1 0100
	{ 4, 2},				//		1 0   ,			1 0101
	{ 4, 2},				//		1 0   ,			1 0110
	{ 4, 2},				//		1 0   ,			1 0111
	{ 3, 2},				//		1 1   ,			1 1000
	{ 3, 2},				//		1 1   ,			1 1001
	{ 3, 2},				//		1 1   ,			1 1010
	{ 3, 2},				//		1 1   ,			1 1011
	{ 3, 2},				//		1 1   ,			1 1100
	{ 3, 2},				//		1 1   ,			1 1101
	{ 3, 2},				//		1 1   ,			1 1110
	{ 3, 2} 				//		1 1   ,			1 1111
};

const UNSIGNED_SEPTET total_zeros_11_coeff[16][2] =
{
//	{code, length},			//		actual code,	full code
	{ 0, 4},				//		0000,			0000
	{ 1, 4},				//		0001,			0001
	{ 2, 3},				//		001 ,			0010
	{ 2, 3},				//		001 ,			0011
	{ 3, 3},				//		010 ,			0100
	{ 3, 3},				//		010 ,			0101
	{ 5, 3},				//		011 ,			0110
	{ 5, 3},				//		011 ,			0111
	{ 4, 1},				//		1 ,				1000
	{ 4, 1},				//		1 ,				1001
	{ 4, 1},				//		1 ,				1010
	{ 4, 1},				//		1 ,				1011
	{ 4, 1},				//		1   ,			1100
	{ 4, 1},				//		1   ,			1101
	{ 4, 1},				//		1   ,			1110
	{ 4, 1} 				//		1   ,			1111
};

const UNSIGNED_SEPTET total_zeros_12_coeff[16][2] =
{
//	{code, length},			//		actual code,	full code
	{ 0, 4},				//		0000,			0000
	{ 1, 4},				//		0001,			0001
	{ 4, 3},				//		001 ,			0010
	{ 4, 3},				//		001 ,			0011
	{ 2, 2},				//		01  ,			0100
	{ 2, 2},				//		01  ,			0101
	{ 2, 2},				//		01  ,			0110
	{ 2, 2},				//		01  ,			0111
	{ 3, 1},				//		1 ,				1000
	{ 3, 1},				//		1 ,				1001
	{ 3, 1},				//		1 ,				1010
	{ 3, 1},				//		1 ,				1011
	{ 3, 1},				//		1   ,			1100
	{ 3, 1},				//		1   ,			1101
	{ 3, 1},				//		1   ,			1110
	{ 3, 1} 				//		1   ,			1111
};

const UNSIGNED_SEPTET total_zeros_13_coeff[8][2] =
{
//	{code, length},			//		actual code,	full code
	{ 0, 3},				//		000,			000
	{ 1, 3},				//		001,			001
	{ 3, 2},				//		01 ,			010
	{ 3, 2},				//		01 ,			011
	{ 2, 1},				//		1  ,			100
	{ 2, 1},				//		1  ,			101
	{ 2, 1},				//		1  ,			110
	{ 2, 1} 				//		1  ,			111
};

const UNSIGNED_SEPTET total_zeros_14_coeff[4][2] =
{
//	{code, length},			//		actual code,	full code
	{ 0, 2},				//		00,				00
	{ 1, 2},				//		01,				01
	{ 2, 1},				//		1 ,				10
	{ 2, 1}					//		1 ,				11
};

const UNSIGNED_SEPTET total_zeros_15_coeff[2][2] =
{
//	{code, length},			//		actual code,	full code
	{ 0, 1},				//		0,				0
	{ 1, 1}					//		1,				1
};

const void * total_zeros_coeff_table_ptrs[16] =
{
	0,                    total_zeros_1_coeff,  total_zeros_2_coeff,  total_zeros_3_coeff,
	total_zeros_4_coeff,  total_zeros_5_coeff,  total_zeros_6_coeff,  total_zeros_7_coeff,
	total_zeros_8_coeff,  total_zeros_9_coeff,  total_zeros_10_coeff, total_zeros_11_coeff,
	total_zeros_12_coeff, total_zeros_13_coeff, total_zeros_14_coeff, total_zeros_15_coeff
};

const int total_zeros_coeff_table_code_length[16] =
{
	0,  9,  6,  6,
	5,  5,  6,  6,
	6,  6,  5,  4,
	4,  3,  2,  1
};

/* ------------------------------------------------------------------------ */
/* NAME:		total_zeros_dc_table										*/
/* DESCRIPTION:	There are 3 tables.
				Indices are table number, 3 bits of codeword, (code, length).
				Table number is the number of non-zero chroma DC 
				coefficients, and the code number indicates the total number 
				of (non-trailing) zeros.									*/
/* ------------------------------------------------------------------------ */

const int total_zeros_dc_table[3][8][2] =
{
	// 1 non-zero coefficient
	{
//		{code, length},		// actual code, full code
		{3, 3},				//		000,	   000
		{2, 3},				//		001,	   001
		{1, 2},				//		01,		   010
		{1, 2},				//		01,		   011
		{0, 1},				//		1,		   100
		{0, 1},				//		1,		   101
		{0, 1},				//		1,		   110
		{0, 1}				//		1,		   111
	},

	// 2 non-zero coefficients
	{
//		{code, length},		// actual code, full code
		{2, 2},				//		00,		   000
		{2, 2},				//		00,		   001
		{1, 2},				//		01,		   010
		{1, 2},				//		01,		   011
		{0, 1},				//		1,		   100
		{0, 1},				//		1,		   101
		{0, 1},				//		1,		   110
		{0, 1}				//		1,		   111
	},

	// 3 non-zero coefficients
	{
//		{code, length},		// actual code, full code
		{1, 1},				//		0,		   000
		{1, 1},				//		0,		   001
		{1, 1},				//		0,		   010
		{1, 1},				//		0,		   011
		{0, 1},				//		1,		   100
		{0, 1},				//		1,		   101
		{0, 1},				//		1,		   110
		{0, 1}				//		1,		   111
	}
};

/* ------------------------------------------------------------------------ */
/* NAME:		run_before_table											*/
/* DESCRIPTION:	There are 7 tables. This faster table is used for the first
				6 tables.
				Indices are table number, 3 bits of codeword, (code, length).
				Table number is number of zeros left minus 1.
				The table number is given by the total number of 
				(non-trailing) zeros left. The codeword indicates the run 
				of zeros before a non-zero coefficient.						*/
/* ------------------------------------------------------------------------ */

const int run_before_table[6][8][2] =
{
	// 1 zero left
	{
//		{code, length},		// actual code, full code
		{1, 1},				//		0,		   000
		{1, 1},				//		0,		   001
		{1, 1},				//		0,		   010
		{1, 1},				//		0,		   011
		{0, 1},				//		1,		   100
		{0, 1},				//		1,		   101
		{0, 1},				//		1,		   110
		{0, 1}				//		1,		   111
	},

	// 2 zeros left
	{
//		{code, length},		// actual code, full code
		{2, 2},				//		00,		   000
		{2, 2},				//		00,		   001
		{1, 2},				//		01,		   010
		{1, 2},				//		01,		   011
		{0, 1},				//		1,		   100
		{0, 1},				//		1,		   101
		{0, 1},				//		1,		   110
		{0, 1}				//		1,		   111
	},

	// 3 zeros left
	{
//		{code, length},		// actual code, full code
		{3, 2},				//		00,		   000
		{3, 2},				//		00,		   001
		{2, 2},				//		01,		   010
		{2, 2},				//		01,		   011
		{1, 2},				//		10,		   100
		{1, 2},				//		10,		   101
		{0, 2},				//		11,		   110
		{0, 2}				//		11,		   111
	},

	// 4 zeros left
	{
//		{code, length},		// actual code, full code
		{4, 3},				//		000,	   000
		{3, 3},				//		001,	   001
		{2, 2},				//		01,		   010
		{2, 2},				//		01,		   011
		{1, 2},				//		10,		   100
		{1, 2},				//		10,		   101
		{0, 2},				//		11,		   110
		{0, 2}				//		11,		   111
	},

	// 5 zeros left
	{
//		{code, length},		// actual code, full code
		{5, 3},				//		000,	   000
		{4, 3},				//		001,	   001
		{3, 3},				//		010,	   010
		{2, 3},				//		011,	   011
		{1, 2},				//		10,		   100
		{1, 2},				//		10,		   101
		{0, 2},				//		11,		   110
		{0, 2}				//		11,		   111
	},

	// 6 zeros left
	{
//		{code, length},		// actual code, full code
		{1, 3},				//		000,	   000
		{2, 3},				//		001,	   001
		{4, 3},				//		010,	   010
		{3, 3},				//		011,	   011
		{6, 3},				//		100,	   100
		{5, 3},				//		101,	   101
		{0, 2},				//		11,		   110
		{0, 2}				//		11,		   111
	}
};

#endif // !defined(CAVLC_HW_PRESENT) && !defined(CAVLC_MODEL_ON)

/* ------------------------------------------------------------------------ */
/* CABAC tables																*/
/* ------------------------------------------------------------------------ */

/* ------------------------------------------------------------------------ */
/* NAME:		m_m_n_tab													*/
/* DESCRIPTION:	This table contains the values of the m and n variables
				which are required to initialize the CABAC context 
				variables pStateIdx.  Dimensions are: 
				ctxIdx
				cabac_init_idc (set artificially to 3 for intra and si)
				m/n															*/
/* ------------------------------------------------------------------------ */
#ifdef __CABAC__

const int m_m_n_tab[][4][2] = 
{
	{{20, -15}, {20, -15}, {20, -15}, {20, -15}},			/* 0 */		/* table 9-12			*/
	{{2,   54}, {2,   54}, {2,   54}, {2,   54}},			/* 1 */
	{{3,   74}, {3,   74}, {3,   74}, {3,   74}},			/* 2 */
	{{20, -15}, {20, -15}, {20, -15}, {20, -15}},			/* 3 */
	{{2,   54}, {2,   54}, {2,   54}, {2,   54}},			/* 4 */
	{{3,   74}, {3,   74}, {3,   74}, {3,   74}},			/* 5 */
	{{-28,127}, {-28,127}, {-28,127}, {-28,127}},			/* 6 */
	{{-23,104}, {-23,104}, {-23,104}, {-23,104}},			/* 7 */
	{{-6,  53}, {-6,  53}, {-6,  53}, {-6,  53}},			/* 8 */
	{{-1,  54}, {-1,  54}, {-1,  54}, {-1,  54}},			/* 9 */
	{{7,   51}, {7,   51}, {7,   51}, {7,   51}},			/* 10 */	/* end of table 9-12	*/
    {{23,  33}, {22,  25}, {29,  16}, {29,  16}},			/* 11 */	/* table 9-13			*/
	{{23,   2}, {34,   0}, {25,   0}, {25,   0}},			/* 12 */
	{{21,   0}, {16,   0}, {14,   0}, {14,   0}},			/* 13 */
	{{1 ,   9}, {-2,   9}, {-10, 51}, {-10, 51}},			/* 14 */
	{{0 ,  49}, {4 ,  41}, {-3,  62}, {-3,  62}},			/* 15 */
	{{-37,118}, {-29,118}, {-27, 99}, {-27, 99}},			/* 16 */
	{{5 ,  57}, {2 ,  65}, {26,  16}, {26,  16}},			/* 17 */
	{{-13, 78}, {-6,  71}, {-4,  85}, {-4,  85}},			/* 18 */
	{{-11, 65}, {-13, 79}, {-24,102}, {-24,102}},			/* 19 */
	{{1 ,  62}, {5 ,  52}, {5 ,  57}, {5 ,  57}},			/* 20 */
	{{12,  49}, {9 ,  50}, {6 ,  57}, {6 ,  57}},			/* 21 */
	{{-4,  73}, {-3,  70}, {-17, 73}, {-17, 73}},			/* 22 */
	{{17,  50}, {10,  54}, {14,  57}, {14,  57}},			/* 23 */	/* end of table 9-13	*/
	{{18,  64}, {26,  34}, {20,  40}, {20,  40}},			/* 24 */	/* table 9-14			*/
	{{9 ,  43}, {19,  22}, {20,  10}, {20,  10}},			/* 25 */
	{{29,   0}, {40,   0}, {29,   0}, {29,   0}},			/* 26 */
	{{26,  67}, {57,   2}, {54,   0}, {54,   0}},			/* 27 */
	{{16,  90}, {41,  36}, {37,  42}, {37,  42}},			/* 28 */
	{{9 , 104}, {26,  69}, {12,  97}, {12,  97}},			/* 29 */
	{{-46,127}, {-45,127}, {-32,127}, {-32,127}},			/* 30 */
	{{-20,104}, {-15,101}, {-22,117}, {-22,117}},			/* 31 */
	{{1 ,  67}, {-4,  76}, {-2,  74}, {-2,  74}},			/* 32 */
	{{-13, 78}, {-6,  71}, {-4,  85}, {-4,  85}},			/* 33 */
	{{-11, 65}, {-13, 79}, {-24,102}, {-24,102}},			/* 34 */
	{{1 ,  62}, {5 ,  52}, {5,   57}, {5,   57}},			/* 35 */
	{{-6,  86}, {6,   69}, {-6,  93}, {-6,  93}},			/* 36 */
	{{-17, 95}, {-13, 90}, {-14, 88}, {-14, 88}},			/* 37 */
	{{-6,  61}, {0,   52}, {-6,  44}, {-6,  44}},			/* 38 */
	{{9 ,  45}, {8 ,  43}, {4 ,  55}, {4 ,  55}},			/* 39 */	/* end of table 9-14	*/
	{{-3,  69}, {-2,  69}, {-11, 89}, {-11, 89}},			/* 40 */	/* table 9-15			*/
	{{-6,  81}, {-5,  82}, {-15,103}, {-15,103}},			/* 41 */
	{{-11, 96}, {-10, 96}, {-21,116}, {-21,116}},			/* 42 */
	{{6 ,  55}, {2 ,  59}, {19,  57}, {19,  57}},			/* 43 */
	{{7 ,  67}, {2 ,  75}, {20,  58}, {20,  58}},			/* 44 */
	{{-5,  86}, {-3,  87}, {4 ,  84}, {4 ,  84}},			/* 45 */
	{{2 ,  88}, {-3, 100}, {6 ,  96}, {6 ,  96}},			/* 46 */
	{{0 ,  58}, {1 ,  56}, {1 ,  63}, {1 ,  63}},			/* 47 */
	{{-3,  76}, {-3,  74}, {-5,  85}, {-5,  85}},			/* 48 */
	{{-10, 94}, {-6,  85}, {-13,106}, {-13,106}},			/* 49 */
	{{5 ,  54}, {0,   59}, {5 ,  63}, {5 ,  63}},			/* 50 */
	{{4 ,  69}, {-3,  81}, {6 ,  75}, {6 ,  75}},			/* 51 */
	{{-3,  81}, {-7,  86}, {-3,  90}, {-3,  90}},			/* 52 */
	{{0 ,  88}, {-5,  95}, {-1, 101}, {-1, 101}},			/* 53 */	/* end of table 9-15	*/
	{{-7,  67}, {-1,  66}, {3 ,  55}, {3 ,  55}},			/* 54 */	/* table 9-16			*/
	{{-5,  74}, {-1,  77}, {-4,  79}, {-4,  79}},			/* 55 */
	{{-4,  74}, {1 ,  70}, {-2,  75}, {-2,  75}},			/* 56 */
	{{-5,  80}, {-2,  86}, {-12, 97}, {-12, 97}},			/* 57 */
	{{-7,  72}, {-5,  72}, {-7,  50}, {-7,  50}},			/* 58 */
	{{1 ,  58}, {0 ,  61}, {1 ,  60}, {1 ,  60}},			/* 59 */	/* end of table 9-16	*/
	{{0 ,  41}, {0 ,  41}, {0 ,  41}, {0 ,  41}},			/* 60 */	/* table 9-17			*/
	{{0,   63}, {0,   63}, {0,   63}, {0,   63}},			/* 61 */
	{{0,   63}, {0,   63}, {0,   63}, {0,   63}},			/* 62 */
	{{0,   63}, {0,   63}, {0,   63}, {0,   63}},			/* 63 */
	{{-9,  83}, {-9,  83}, {-9,  83}, {-9,  83}},			/* 64 */
	{{4 ,  86}, {4 ,  86}, {4 ,  86}, {4 ,  86}},			/* 65 */
	{{0,   97}, {0,   97}, {0,   97}, {0,   97}},			/* 66 */
	{{-7,  72}, {-7,  72}, {-7,  72}, {-7,  72}},			/* 67 */
	{{13,  41}, {13,  41}, {13,  41}, {13,  41}},			/* 68 */
	{{3 ,  62}, {3 ,  62}, {3 ,  62}, {3 ,  62}},			/* 69 */	/* end of table 9-17	*/
	{{0 ,  45}, {13,  15}, {7 ,  34}, {0 ,  11}},			/* 70 */	/* table 9-18			*/
	{{-4,  78}, {7 ,  51}, {-9,  88}, {1 ,  55}},			/* 71 */
	{{-3,  96}, {2 ,  80}, {-20,127}, {0 ,  69}},			/* 72 */
	{{-27,126}, {-39,127}, {-36,127}, {-17,127}},			/* 73 */
	{{-28, 98}, {-18, 91}, {-17, 91}, {-13,102}},			/* 74 */
	{{-25,101}, {-17, 96}, {-14, 95}, {0 ,  82}},			/* 75 */
	{{-23, 67}, {-26, 81}, {-25, 84}, {-7,  74}},			/* 76 */
	{{-28, 82}, {-35, 98}, {-25, 86}, {-21,107}},			/* 77 */
	{{-20, 94}, {-24,102}, {-12, 89}, {-27,127}},			/* 78 */
	{{-16, 83}, {-23, 97}, {-17, 91}, {-31,127}},			/* 79 */
	{{-22,110}, {-27,119}, {-31,127}, {-24,127}},			/* 80 */
	{{-21, 91}, {-24, 99}, {-14, 76}, {-18, 95}},			/* 81 */
	{{-18,102}, {-21,110}, {-18,103}, {-27,127}},			/* 82 */
	{{-13, 93}, {-18,102}, {-13, 90}, {-21,114}},			/* 83 */
	{{-29,127}, {-36,127}, {-37,127}, {-30,127}},			/* 84 */
	{{-7,  92}, {0,   80}, {11,	 80}, {-17,123}},			/* 85 */
	{{-5,  89}, {-5,  89}, {5,   76}, {-12,115}},			/* 86 */
	{{-7,  96}, {-7,  94}, {2,   84}, {-16,122}},			/* 87 */											 
	{{-13,108}, {-4,  92}, {5,   78}, {-11,115}},			/* 88 */
	{{-3,  46}, {0,   39}, {-6,  55}, {-12, 63}},			/* 89 */
	{{-1,  65}, {0,   65}, {4,   61}, {-2,  68}},			/* 90 */
	{{-1,  57}, {-15, 84}, {-14, 83}, {-15, 84}},			/* 91 */
	{{-9,  93}, {-35,127}, {-37,127}, {-13,104}},			/* 92 */
	{{-3,  74}, {-2,  73}, {-5,  79}, {-3,  70}},			/* 93 */
	{{-9,  92}, {-12,104}, {-11,104}, {-8,  93}},			/* 94 */
	{{-8,  87}, {-9,  91}, {-11, 91}, {-10, 90}},			/* 95 */
	{{-23,126}, {-31,127}, {-30,127}, {-30,127}},			/* 96 */
	{{5 ,  54}, {3,   55}, {0,   65}, {-1,  74}},			/* 97 */
	{{6 ,  60}, {7,   56}, {-2,  79}, {-6,  97}},			/* 98 */
	{{6 ,  59}, {7,   55}, {0,   72}, {-7,  91}},			/* 99 */
	{{6 ,  69}, {8,   61}, {-4,  92}, {-20,127}},			/* 100 */
	{{-1,  48}, {-3,  53}, {-6,  56}, {-4,  56}},			/* 101 */
	{{0,   68}, {0,   68}, {3,   68}, {-5,  82}},			/* 102 */
	{{-4,  69}, {-7,  74}, {-8,  71}, {-7,  76}},			/* 103 */
	{{-8,  88}, {-9,  88}, {-13, 98}, {-22,125}},			/* 104 */	/* end of table 9-18	*/
	{{-2,  85}, {-13,103}, {-4,  86}, {-7,  93}},			/* 105 */	/* table 9-19			*/
	{{-6,  78}, {-13, 91}, {-12, 88}, {-11, 87}},			/* 106 */
	{{-1,  75}, {-9,  89}, {-5,  82}, {-3,  77}},			/* 107 */
	{{-7,  77}, {-14, 92}, {-3,  72}, {-5,  71}},			/* 108 */
	{{2 ,  54}, {-8,  76}, {-4,  67}, {-4,  63}},			/* 109 */
	{{5 ,  50}, {-12, 87}, {-8,  72}, {-4,  68}},			/* 110 */
	{{-3,  68}, {-23,110}, {-16, 89}, {-12, 84}},			/* 111 */
	{{1 ,  50}, {-24,105}, {-9,  69}, {-7,  62}},			/* 112 */
	{{6 ,  42}, {-10, 78}, {-1,  59}, {-7,  65}},			/* 113 */
	{{-4,  81}, {-20,112}, {5,   66}, {8,   61}},			/* 114 */
	{{1 ,  63}, {-17, 99}, {4,   57}, {5,   56}},			/* 115 */
	{{-4,  70}, {-78,127}, {-4,  71}, {-2,  66}},			/* 116 */
	{{0 ,  67}, {-70,127}, {-2,  71}, {1,   64}},			/* 117 */
	{{2 ,  57}, {-50,127}, {2,   58}, {0,   61}},			/* 118 */
	{{-2,  76}, {-46,127}, {-1,  74}, {-2,  78}},			/* 119 */
	{{11,  35}, {-4,  66}, {-4,  44}, {1,   50}},			/* 120 */
	{{4 ,  64}, {-5,  78}, {-1,  69}, {7,   52}},			/* 121 */
	{{1 ,  61}, {-4,  71}, {0,   62}, {10,  35}},			/* 122 */
	{{11,  35}, {-8,  72}, {-7,  51}, {0,   44}},			/* 123 */
	{{18,  25}, {2 ,  59}, {-4,  47}, {11,  38}},			/* 124 */
	{{12,  24}, {-1,  55}, {-6,  42}, {1,   45}},			/* 125 */
	{{13,  29}, {-7,  70}, {-3,  41}, {0,   46}},			/* 126 */
	{{13,  36}, {-6,  75}, {-6,  53}, {5,   44}},			/* 127 */
	{{-10, 93}, {-8,  89}, {8,   76}, {31,  17}},			/* 128 */
	{{-7,  73}, {-34,119}, {-9,  78}, {1,   51}},			/* 129 */
	{{-2,  73}, {-3,  75}, {-11, 83}, {7,   50}},			/* 130 */
	{{13,  46}, {32,  20}, {9,   52}, {28,  19}},			/* 131 */
	{{9,   49}, {30,  22}, {0,   67}, {16,  33}},			/* 132 */
	{{-7, 100}, {-44,127}, {-5,  90}, {14,  62}},			/* 133 */
	{{9 ,  53}, {0,   54}, {1,   67}, {-13,108}},			/* 134 */
	{{2 ,  53}, {-5,  61}, {-15, 72}, {-15,100}},			/* 135 */
	{{5 ,  53}, {0,   58}, {-5,  75}, {-13,101}},			/* 136 */
	{{-2,  61}, {-1,  60}, {-8,  80}, {-13, 91}},			/* 137 */
	{{0 ,  56}, {-3,  61}, {-21, 83}, {-12, 94}},			/* 138 */
	{{0 ,  56}, {-8,  67}, {-21, 64}, {-10, 88}},			/* 139 */
	{{-13, 63}, {-25, 84}, {-13, 31}, {-16, 84}},			/* 140 */
	{{-5,  60}, {-14, 74}, {-25, 64}, {-10, 86}},			/* 141 */
	{{-1,  62}, {-5,  65}, {-29, 94}, {-7,  83}},			/* 142 */
	{{4 ,  57}, {5,   52}, {9,   75}, {-13, 87}},			/* 143 */
	{{-6,  69}, {2,   57}, {17,  63}, {-19, 94}},			/* 144 */
	{{4 ,  57}, {0,   61}, {-8,  74}, {1,   70}},			/* 145 */
	{{14,  39}, {-9,  69}, {-5,  35}, {0,   72}},			/* 146 */
	{{4 ,  51}, {-11, 70}, {-2,  27}, {-5,  74}},			/* 147 */
	{{13,  68}, {18,  55}, {13,  91}, {18,  59}},			/* 148 */
	{{3 ,  64}, {-4,  71}, {3,   65}, {-8, 102}},			/* 149 */
	{{1 ,  61}, {0,   58}, {-7,  69}, {-15,100}},			/* 150 */
	{{9 ,  63}, {7,   61}, {8,   77}, {0,   95}},			/* 151 */
	{{7 ,  50}, {9,   41}, {-10, 66}, {-4,  75}},			/* 152 */
	{{16,  39}, {18,  25}, {3,   62}, {2,   72}},			/* 153 */
	{{5 ,  44}, {9,   32}, {-3,  68}, {-11, 75}},			/* 154 */
	{{4 ,  52}, {5,   43}, {-20, 81}, {-3,  71}},			/* 155 */
	{{11,  48}, {9,   47}, {0,   30}, {15,  46}},			/* 156 */
	{{-5,  60}, {0,   44}, {1,    7}, {-13, 69}},			/* 157 */
	{{-1,  59}, {0,   51}, {-3,  23}, {0,   62}},			/* 158 */
	{{0 ,  59}, {2,   46}, {-21, 74}, {0,   65}},			/* 159 */
	{{22,  33}, {19,  38}, {16,  66}, {21,  37}},			/* 160 */
	{{5 ,  44}, {-4,  66}, {-23,124}, {-15, 72}},			/* 161 */
	{{14,  43}, {15,  38}, {17,  37}, {9,   57}},			/* 162 */
	{{-1,  78}, {12,  42}, {44, -18}, {16,  54}},			/* 163 */
	{{0 ,  60}, {9,   34}, {50, -34}, {0,   62}},			/* 164 */
	{{9 ,  69}, {0,   89}, {-22,127}, {12,  72}},			/* 165 */	/* end of table 9-19	*/
	{{11,  28}, {4,	  45}, {4,   39}, {24,	 0}},			/* 166 */	/* table 9-20			*/
	{{2,   40}, {10,  28}, {0,   42}, {15,   9}},			/* 167 */
	{{3,   44}, {10,  31}, {7,   34}, {8,   25}},			/* 168 */
	{{0,   49}, {33, -11}, {11,  29}, {13,  18}},			/* 169 */
	{{0,   46}, {52, -43}, {8,   31}, {15,   9}},			/* 170 */
	{{2,   44}, {18,  15}, {6,   37}, {13,  19}},			/* 171 */
	{{2,   51}, {28,   0}, {7,   42}, {10,  37}},			/* 172 */
	{{0,   47}, {35, -22}, {3,   40}, {12,  18}},			/* 173 */
	{{4,   39}, {38, -25}, {8,   33}, {6,   29}},			/* 174 */
	{{2,   62}, {34,   0}, {13,  43}, {20,  33}},			/* 175 */
	{{6,   46}, {39, -18}, {13,  36}, {15,  30}},			/* 176 */
	{{0,   54}, {32, -12}, {4,   47}, {4,   45}},			/* 177 */
	{{3,   54}, {102,-94}, {3,   55}, {1,   58}},			/* 178 */
	{{2,   58}, {0,    0}, {2,   58}, {0,   62}},			/* 179 */
	{{4,   63}, {56, -15}, {6,   60}, {7,   61}},			/* 180 */
	{{6,   51}, {33,  -4}, {8,   44}, {12,  38}},			/* 181 */
	{{6,   57}, {29,  10}, {11,  44}, {11,  45}},			/* 182 */
	{{7,   53}, {37,  -5}, {14,  42}, {15,  39}},			/* 183 */
	{{6,   52}, {51, -29}, {7,   48}, {11,  42}},			/* 184 */
	{{6,   55}, {39,  -9}, {4,   56}, {13,  44}},			/* 185 */
	{{11,  45}, {52, -34}, {4,   52}, {16,  45}},			/* 186 */
	{{14,  36}, {69, -58}, {13,  37}, {12,  41}},			/* 187 */
	{{8,   53}, {67, -63}, {9,   49}, {10,  49}},			/* 188 */
	{{-1,  82}, {44,  -5}, {19,  58}, {30,  34}},			/* 189 */
	{{7,   55}, {32,   7}, {10,  48}, {18,  42}},			/* 190 */
	{{-3,  78}, {55, -29}, {12,  45}, {10,  55}},			/* 191 */
	{{15,  46}, {32,   1}, {0,   69}, {17,  51}},			/* 192 */
	{{22,  31}, {0,    0}, {20,  33}, {17,  46}},			/* 193 */
	{{-1,  84}, {27,  36}, {8,   63}, {0,   89}},			/* 194 */
	{{25,   7}, {33, -25}, {35, -18}, {26, -19}},			/* 195 */
	{{30,  -7}, {34, -30}, {33, -25}, {22, -17}},			/* 196 */
	{{28,   3}, {36, -28}, {28,  -3}, {26, -17}},			/* 197 */
	{{28,   4}, {38, -28}, {24,  10}, {30, -25}},			/* 198 */
	{{32,   0}, {38, -27}, {27,   0}, {28, -20}},			/* 199 */
	{{34,  -1}, {34, -18}, {34, -14}, {33, -23}},			/* 200 */
	{{30,   6}, {35, -16}, {52, -44}, {37, -27}},			/* 201 */
	{{30,   6}, {34, -14}, {39, -24}, {33, -23}},			/* 202 */
	{{32,   9}, {32,  -8}, {19,  17}, {40, -28}},			/* 203 */
	{{31,  19}, {37,  -6}, {31,  25}, {38, -17}},			/* 204 */
	{{26,  27}, {35,   0}, {36,  29}, {33, -11}},			/* 205 */
	{{26,  30}, {30,  10}, {24,  33}, {40, -15}},			/* 206 */
	{{37,  20}, {28,  18}, {34,  15}, {41,  -6}},			/* 207 */
	{{28,  34}, {26,  25}, {30,  20}, {38,   1}},			/* 208 */
	{{17,  70}, {29,  41}, {22,  73}, {41,  17}},			/* 209 */
	{{1,   67}, {0,   75}, {20,  34}, {30,  -6}},			/* 210 */
	{{5,   59}, {2,   72}, {19,  31}, {27,   3}},			/* 211 */
	{{9,   67}, {8,   77}, {27,  44}, {26,  22}},			/* 212 */
	{{16,  30}, {14,  35}, {19,  16}, {37, -16}},			/* 213 */
	{{18,  32}, {18,  31}, {15,  36}, {35,  -4}},			/* 214 */
	{{18,  35}, {17,  35}, {15,  36}, {38,  -8}},			/* 215 */
	{{22,  29}, {21,  30}, {21,  28}, {38,  -3}},			/* 216 */
	{{24,  31}, {17,  45}, {25,  21}, {37,   3}},			/* 217 */
	{{23,  38}, {20,  42}, {30,  20}, {38,   5}},			/* 218 */
	{{18,  43}, {18,  45}, {31,  12}, {42,   0}},			/* 219 */
	{{20,  41}, {27,  26}, {27,  16}, {35,  16}},			/* 220 */
	{{11,  63}, {16,  54}, {24,  42}, {39,  22}},			/* 221 */
	{{9,   59}, {7,   66}, {0,   93}, {14,  48}},			/* 222 */
	{{9,   64}, {16,  56}, {14,  56}, {27,  37}},			/* 223 */
	{{-1,  94}, {11,  73}, {15,  57}, {21,  60}},			/* 224 */
	{{-2,  89}, {10,  67}, {26,  38}, {12,  68}},			/* 225 */
	{{-9, 108}, {-10,116}, {-24,127}, {2,   97}},			/* 226 */	/* end of table 9-20	*/
	{{-6,  76}, {-23,112}, {-24,115}, {-3,  71}},			/* 227 */
	{{-2,  44}, {-15, 71}, {-22, 82}, {-6,  42}},			/* 228 */
	{{0,   45}, {-7,  61}, {-9,  62}, {-5,  50}},			/* 229 */
	{{0,   52}, {0,   53}, {0,   53}, {-3,  54}},			/* 230 */
	{{-3,  64}, {-5,  66}, {0,   59}, {-2,  62}},			/* 231 */
	{{-2,  59}, {-11, 77}, {-14, 85}, {0,   58}},			/* 232 */
	{{-4,  70}, {-9,  80}, {-13, 89}, {1,   63}},			/* 233 */
	{{-4,  75}, {-9,  84}, {-13, 94}, {-2,  72}},			/* 234 */
	{{-8,  82}, {-10, 87}, {-11, 92}, {-1,  74}},			/* 235 */
	{{-17,102}, {-34,127}, {-29,127}, {-9,  91}},			/* 236 */
	{{-9,  77}, {-21,101}, {-21,100}, {-5,  67}},			/* 237 */
	{{3,   24}, {-3,  39}, {-14, 57}, {-5,  27}},			/* 238 */
	{{0,   42}, {-5,  53}, {-12, 67}, {-3,  39}},			/* 239 */
	{{0,   48}, {-7,  61}, {-11, 71}, {-2,  44}},			/* 240 */
	{{0,   55}, {-11, 75}, {-10, 77}, {0,   46}},			/* 241 */
	{{-6,  59}, {-15, 77}, {-21, 85}, {-16, 64}},			/* 242 */
	{{-7,  71}, {-17, 91}, {-16, 88}, {-8,  68}},			/* 243 */
	{{-12, 83}, {-25,107}, {-23,104}, {-10, 78}},			/* 244 */
	{{-11, 87}, {-25,111}, {-15, 98}, {-6,  77}},			/* 245 */
	{{-30,119}, {-28,122}, {-37,127}, {-10, 86}},			/* 246 */
	{{1,   58}, {-11, 76}, {-10, 82}, {-12, 92}},			/* 247 */
	{{-3,  29}, {-10, 44}, {-8,  48}, {-15, 55}},			/* 248 */
	{{-1,  36}, {-10, 52}, {-8,  61}, {-10, 60}},			/* 249 */
	{{1,   38}, {-10, 57}, {-8,  66}, {-6,  62}},			/* 250 */
	{{2,   43}, {-9,  58}, {-7,  70}, {-4,  65}},			/* 251 */
	{{-6,  55}, {-16, 72}, {-14, 75}, {-12, 73}},			/* 252 */
	{{0,   58}, {-7,  69}, {-10, 79}, {-8,  76}},			/* 253 */
	{{0,   64}, {-4,  69}, {-9,  83}, {-7,  80}},			/* 254 */
	{{-3,  74}, {-5,  74}, {-12, 92}, {-9,  88}},			/* 255 */
	{{-10, 90}, {-9,  86}, {-18,108}, {-17,110}},			/* 256 */
	{{0,   70}, {2,   66}, {-4,  79}, {-11, 97}},			/* 257 */
	{{-4,  29}, {-9,  34}, {-22, 69}, {-20, 84}},			/* 258 */
	{{5,   31}, {1,   32}, {-16, 75}, {-11, 79}},			/* 259 */
	{{7,   42}, {11,  31}, {-2,  58}, {-6,  73}},			/* 260 */
	{{1,   59}, {5,   52}, {1,   58}, {-4,  74}},			/* 261 */
	{{-2,  58}, {-2,  55}, {-13, 78}, {-13, 86}},			/* 262 */
	{{-3,  72}, {-2,  67}, {-9,  83}, {-13, 96}},			/* 263 */
	{{-3,  81}, {0,   73}, {-4,  81}, {-11, 97}},			/* 264 */
	{{-11, 97}, {-8,  89}, {-13, 99}, {-19,117}},			/* 265 */
	{{0,   58}, {3,   52}, {-13, 81}, {-8,  78}},			/* 266 */
	{{8,    5}, {7,    4}, {-6,  38}, {-5,  33}},			/* 267 */
	{{10,  14}, {10,   8}, {-13, 62}, {-4,  48}},			/* 268 */
	{{14,  18}, {17,   8}, {-6,  58}, {-2,  53}},			/* 269 */
	{{13,  27}, {16,  19}, {-2,  59}, {-3,  62}},			/* 270 */
	{{2,   40}, {3,   37}, {-16, 73}, {-13, 71}},			/* 271 */
	{{0,   58}, {-1,  61}, {-10, 76}, {-10, 79}},			/* 272 */
	{{-3,  70}, {-5,  73}, {-13, 86}, {-12, 86}},			/* 273 */
	{{-6,  79}, {-1,  70}, {-9,  83}, {-13, 90}},			/* 274 */
	{{-8,  85}, {-4,  78}, {-10, 87}, {-14, 97}},			/* 275 */	/* end of table 9-21 */
	{{0,    0}, {0,    0}, {0,    0}, {0,    0}},			/* 276 end_of_slice I_PCM*/
	{{-13,106}, {-21,126}, {-22,127}, {-6,  93}},			/* 277 */	/* table 9-22 */
	{{-16,106}, {-23,124}, {-25,127}, {-6,  84}},			/* 278 */
	{{-10, 87}, {-20,110}, {-25,120}, {-8,  79}},			/* 279 */
	{{-21,114}, {-26,126}, {-27,127}, {0,   66}},			/* 280 */
	{{-18,110}, {-25,124}, {-19,114}, {-1,  71}},			/* 281 */
	{{-14, 98}, {-17,105}, {-23,117}, {0,   62}},			/* 282 */
	{{-22,110}, {-27,121}, {-25,118}, {-2,  60}},			/* 283 */
	{{-21,106}, {-27,117}, {-26,117}, {-2,  59}},			/* 284 */
	{{-18,103}, {-17,102}, {-24,113}, {-5,  75}},			/* 285 */
	{{-21,107}, {-26,117}, {-28,118}, {-3,  62}},			/* 286 */
	{{-23,108}, {-27,116}, {-31,120}, {-4,  58}},			/* 287 */
	{{-26,112}, {-33,122}, {-37,124}, {-9,  66}},			/* 288 */
	{{-10, 96}, {-10, 95}, {-10, 94}, {-1,  79}},			/* 289 */
	{{-12, 95}, {-14,100}, {-15,102}, {0,   71}},			/* 290 */
	{{-5,  91}, {-8,  95}, {-10, 99}, {3,   68}},			/* 291 */
	{{-9,  93}, {-17,111}, {-13,106}, {10,  44}},			/* 292 */
	{{-22, 94}, {-28,114}, {-50,127}, {-7,  62}},			/* 293 */
	{{-5,  86}, {-6,  89}, {-5,  92}, {15,  36}},			/* 294 */
	{{9,   67}, {-2,  80}, {17,  57}, {14,  40}},			/* 295 */
	{{-4,  80}, {-4,  82}, {-5,  86}, {16,  27}},			/* 296 */
	{{-10, 85}, {-9,  85}, {-13, 94}, {12,  29}},			/* 297 */
	{{-1,  70}, {-8,  81}, {-12, 91}, {1,   44}},			/* 298 */
	{{7,   60}, {-1,  72}, {-2,  77}, {20,  36}},			/* 299 */
	{{9,   58}, {5,   64}, {0,   71}, {18,  32}},			/* 300 */
	{{5,   61}, {1,   67}, {-1,  73}, {5,   42}},			/* 301 */
	{{12,  50}, {9,   56}, {4,   64}, {1,   48}},			/* 302 */
	{{15,  50}, {0,   69}, {-7,  81}, {10,  62}},			/* 303 */
	{{18,  49}, {1,   69}, {5,   64}, {17,  46}},			/* 304 */
	{{17,  54}, {7,   69}, {15,  57}, {9,   64}},			/* 305 */
	{{10,  41}, {-7,  69}, {1,   67}, {-12,104}},			/* 306 */
	{{7,   46}, {-6,  67}, {0,   68}, {-11, 97}},			/* 307 */
	{{-1,  51}, {-16, 77}, {-10, 67}, {-16, 96}},			/* 308 */
	{{7,   49}, {-2,  64}, {1,   68}, {-7,  88}},			/* 309 */
	{{8,   52}, {2,   61}, {0,   77}, {-8,  85}},			/* 310 */
	{{9,   41}, {-6,  67}, {2,   64}, {-7,  85}},			/* 311 */
	{{6,   47}, {-3,  64}, {0,   68}, {-9,  85}},			/* 312 */
	{{2,   55}, {2,   57}, {-5,  78}, {-13, 88}},			/* 313 */
	{{13,  41}, {-3,  65}, {7,   55}, {4,   66}},			/* 314 */
	{{10,  44}, {-3,  66}, {5,   59}, {-3,  77}},			/* 315 */
	{{6,   50}, {0,   62}, {2,   65}, {-3,  76}},			/* 316 */
	{{5,   53}, {9,   51}, {14,  54}, {-6,  76}},			/* 317 */
	{{13,  49}, {-1,  66}, {15,  44}, {10,  58}},			/* 318 */
	{{4,   63}, {-2,  71}, {5,   60}, {-1,  76}},			/* 319 */
	{{6,   64}, {-2,  75}, {2,   70}, {-1,  83}},			/* 320 */
	{{-2,  69}, {-1,  70}, {-2,  76}, {-7,  99}},			/* 321 */
	{{-2,  59}, {-9,  72}, {-18, 86}, {-14, 95}},			/* 322 */
	{{6,   70}, {14,  60}, {12,  70}, {2,   95}},			/* 323 */
	{{10,  44}, {16,  37}, {5,   64}, {0,   76}},			/* 324 */
	{{9,   31}, {0,   47}, {-12, 70}, {-5,  74}},			/* 325 */
	{{12,  43}, {18,  35}, {11,  55}, {0,   70}},			/* 326 */
	{{3,   53}, {11,  37}, {5,   56}, {-11, 75}},			/* 327 */
	{{14,  34}, {12,  41}, {0,   69}, {1,   68}},			/* 328 */
	{{10,  38}, {10,  41}, {2,   65}, {0,   65}},			/* 329 */
	{{-3,  52}, {2,   48}, {-6,  74}, {-14, 73}},			/* 330 */
	{{13,  40}, {12,  41}, {5,   54}, {3,   62}},			/* 331 */
	{{17,  32}, {13,  41}, {7,   54}, {4,   62}},			/* 332 */
	{{7,   44}, {0,   59}, {-6,  76}, {-1,  68}},			/* 333 */
	{{7,   38}, {3,   50}, {-11, 82}, {-13, 75}},			/* 334 */
	{{13,  50}, {19,  40}, {-2,  77}, {11,  55}},			/* 335 */
	{{10,  57}, {3,   66}, {-2,  77}, {5,   64}},			/* 336 */
	{{26,  43}, {18,  50}, {25,  42}, {12,  70}},			/* 337 */	/* end of table 9-22 */
	{{14,  11}, {19,  -6}, {17, -13}, {15,   6}},			/* 338 */	/* table 9-23 */
	{{11,  14}, {18,  -6}, {16,  -9}, {6,   19}},			/* 339 */
	{{9,   11}, {14,   0}, {17, -12}, {7,   16}},			/* 340 */
	{{18,  11}, {26, -12}, {27, -21}, {12,  14}},			/* 341 */
	{{21,   9}, {31, -16}, {37, -30}, {18,  13}},			/* 342 */
	{{23,  -2}, {33, -25}, {41, -40}, {13,  11}},			/* 343 */
	{{32, -15}, {33, -22}, {42, -41}, {13,  15}},			/* 344 */
	{{32, -15}, {37, -28}, {48, -47}, {15,  16}},			/* 345 */
	{{34, -21}, {39, -30}, {39, -32}, {12,  23}},			/* 346 */
	{{39, -23}, {42, -30}, {46, -40}, {13,  23}},			/* 347 */
	{{42, -33}, {47, -42}, {52, -51}, {15,  20}},			/* 348 */
	{{41, -31}, {45, -36}, {46, -41}, {14,  26}},			/* 349 */
	{{46, -28}, {49, -34}, {52, -39}, {14,  44}},			/* 350 */
	{{38, -12}, {41, -17}, {43, -19}, {17,  40}},			/* 351 */
	{{21,  29}, {32,   9}, {32,  11}, {17,  47}},			/* 352 */
	{{45, -24}, {69, -71}, {61, -55}, {24,  17}},			/* 353 */
	{{53, -45}, {63, -63}, {56, -46}, {21,  21}},			/* 354 */
	{{48, -26}, {66, -64}, {62, -50}, {25,  22}},			/* 355 */
	{{65, -43}, {77, -74}, {81, -67}, {31,  27}},			/* 356 */
	{{43, -19}, {54, -39}, {45, -20}, {22,  29}},			/* 357 */
	{{39, -10}, {52, -35}, {35,  -2}, {19,  35}},			/* 358 */
	{{30,   9}, {41, -10}, {28,  15}, {14,  50}},			/* 359 */
	{{18,  26}, {36,   0}, {34,   1}, {10,  57}},			/* 360 */
	{{20,  27}, {40,  -1}, {39,   1}, {7,   63}},			/* 361 */
	{{0,   57}, {30,  14}, {30,  17}, {-2,  77}},			/* 362 */
	{{-14, 82}, {28,  26}, {20,  38}, {-4,  82}},			/* 363 */
	{{-5,  75}, {23,  37}, {18,  45}, {-3,  94}},			/* 364 */
	{{-19, 97}, {12,  55}, {15,  54}, {9,   69}},			/* 365 */
	{{-35,125}, {11,  65}, {0,   79}, {-12,109}},			/* 366 */
	{{27,   0}, {37, -33}, {36, -16}, {36, -35}},			/* 367 */
	{{28,   0}, {39, -36}, {37, -14}, {36, -34}},			/* 368 */
	{{31,  -4}, {40, -37}, {37, -17}, {32, -26}},			/* 369 */
	{{27,   6}, {38, -30}, {32,   1}, {37, -30}},			/* 370 */
	{{34,   8}, {46, -33}, {34,  15}, {44, -32}},			/* 371 */
	{{30,  10}, {42, -30}, {29,  15}, {34, -18}},			/* 372 */
	{{24,  22}, {40, -24}, {24,  25}, {34, -15}},			/* 373 */
	{{33,  19}, {49, -29}, {34,  22}, {40, -15}},			/* 374 */
	{{22,  32}, {38, -12}, {31,  16}, {33,  -7}},			/* 375 */
	{{26,  31}, {40, -10}, {35,  18}, {35,  -5}},			/* 376 */
	{{21,  41}, {38,  -3}, {31,  28}, {33,   0}},			/* 377 */
	{{26,  44}, {46,  -5}, {33,  41}, {38,   2}},			/* 378 */
	{{23,  47}, {31,  20}, {36,  28}, {33,  13}},			/* 379 */
	{{16,  65}, {29,  30}, {27,  47}, {23,  35}},			/* 380 */
	{{14,  71}, {25,  44}, {21,  62}, {13,  58}},			/* 381 */
	{{8,   60}, {12,  48}, {18,  31}, {29,  -3}},			/* 382 */
	{{6,   63}, {11,  49}, {19,  26}, {26,   0}},			/* 383 */
	{{17,  65}, {26,  45}, {36,  24}, {22,  30}},			/* 384 */
	{{21,  24}, {22,  22}, {24,  23}, {31,  -7}},			/* 385 */
	{{23,  20}, {23,  22}, {27,  16}, {35, -15}},			/* 386 */
	{{26,  23}, {27,  21}, {24,  30}, {34,  -3}},			/* 387 */
	{{27,  32}, {33,  20}, {31,  29}, {34,   3}},			/* 388 */
	{{28,  23}, {26,  28}, {22,  41}, {36,  -1}},			/* 389 */
	{{28,  24}, {30,  24}, {22,  42}, {34,   5}},			/* 390 */
	{{23,  40}, {27,  34}, {16,  60}, {32,  11}},			/* 391 */
	{{24,  32}, {18,  42}, {15,  52}, {35,   5}},			/* 392 */
	{{28,  29}, {25,  39}, {14,  60}, {34,  12}},			/* 393 */
	{{23,  42}, {18,  50}, {3,   78}, {39,  11}},			/* 394 */
	{{19,  57}, {12,  70}, {-16,123}, {30,  29}},			/* 395 */
	{{22,  53}, {21,  54}, {21,  53}, {34,  26}},			/* 396 */
	{{22,  61}, {14,  71}, {22,  56}, {29,  39}},			/* 397 */
	{{11,  86}, {11,  83}, {25,  61}, {19,  66}},			/* 398 */
	{{12,  40}, {25,  32}, {21,  33}, {31,  21}},			/* 399 */
	{{11,  51}, {21,  49}, {19,  50}, {31,  31}},			/* 400 */
	{{14,  59}, {21,  54}, {17,  61}, {25,  50}},			/* 401 */
	{{-4,  79}, {-5,  85}, {-3,  78}, {-17,120}},			/* 402 */
	{{-7,  71}, {-6,  81}, {-8,  74}, {-20,112}},			/* 403 */
	{{-5,  69}, {-10, 77}, {-9,  72}, {-18,114}},			/* 404 */
	{{-9,  70}, {-7,  81}, {-10, 72}, {-11, 85}},			/* 405 */
	{{-8,  66}, {-17, 80}, {-18, 75}, {-15, 92}},			/* 406 */
	{{-10, 68}, {-18, 73}, {-12, 71}, {-14, 89}},			/* 407 */
	{{-19, 73}, {-4,  74}, {-11, 63}, {-26, 71}},			/* 408 */
	{{-12, 69}, {-10, 83}, {-5,  70}, {-15, 81}},			/* 409 */
	{{-16, 70}, {-9,  71}, {-17, 75}, {-14, 80}},			/* 410 */
	{{-15, 67}, {-9,  67}, {-14, 72}, {0,  	68}},			/* 411 */
	{{-20, 62}, {-1,  61}, {-16, 67}, {-14, 70}},			/* 412 */
	{{-19, 70}, {-8,  66}, {-8,  53}, {-24, 56}},			/* 413 */
	{{-16, 66}, {-14, 66}, {-14, 59}, {-23, 68}},			/* 414 */
	{{-22, 65}, {0,   59}, {-9,  52}, {-24, 50}},			/* 415 */
	{{-20, 63}, {2,   59}, {-11, 68}, {-11, 74}},			/* 416 */
	{{9,   -2}, {17, -10}, {9,   -2}, {23, -13}},			/* 417 */
	{{26,  -9}, {32, -13}, {30, -10}, {26, -13}},			/* 418 */
	{{33,  -9}, {42,  -9}, {31,  -4}, {40, -15}},			/* 419 */
	{{39,  -7}, {49,  -5}, {33,  -1}, {49, -14}},			/* 420 */
	{{41,  -2}, {53,   0}, {33,   7}, {44,   3}},			/* 421 */
	{{45,   3}, {64,   3}, {31,  12}, {45,   6}},			/* 422 */
	{{49,   9}, {68,  10}, {37,  23}, {44,  34}},			/* 423 */
	{{45,  27}, {66,  27}, {31,  38}, {33,  54}},			/* 424 */
	{{36,  59}, {47,  57}, {20,  64}, {19,  82}},			/* 425 */
	{{-6,  66}, {-5,  71}, {-9,  71}, {-3,  75}},			/* 426 */
	{{-7,  35}, {0,   24}, {-7,  37}, {-1,  23}},			/* 427 */
	{{-7,  42}, {-1,  36}, {-8,  44}, {1,  	34}},			/* 428 */
	{{-8,  45}, {-2,  42}, {-11, 49}, {1,  	43}},			/* 429 */
	{{-5,  48}, {-2,  52}, {-10, 56}, {0,  	54}},			/* 430 */
	{{-12, 56}, {-9,  57}, {-12, 59}, {-2,  55}},			/* 431 */
	{{-6,  60}, {-6,  63}, {-8,  63}, {0,  	61}},			/* 432 */
	{{-5,  62}, {-4,  65}, {-9,  67}, {1,  	64}},			/* 433 */
	{{-8,  66}, {-4,  67}, {-6,  68}, {0,  	68}},			/* 434 */
	{{-8,  76}, {-7,  82}, {-10, 79}, {-9,  92}},			/* 435 */
	{{-5,  85}, {-3,  81}, {-3,  78}, {-14,106}},			/* 436 */
	{{-6,  81}, {-3,  76}, {-8,  74}, {-13, 97}},			/* 437 */
	{{-10, 77}, {-7,  72}, {-9,  72}, {-15, 90}},			/* 438 */
	{{-7,  81}, {-6,  78}, {-10, 72}, {-12, 90}},			/* 439 */
	{{-17, 80}, {-12, 72}, {-18, 75}, {-18, 88}},			/* 440 */
	{{-18, 73}, {-14, 68}, {-12, 71}, {-10, 73}},			/* 441 */
	{{-4,  74}, {-3,  70}, {-11, 63}, {-9,  79}},			/* 442 */
	{{-10, 83}, {-6,  76}, {-5,  70}, {-14, 86}},			/* 443 */
	{{-9,  71}, {-5,  66}, {-17, 75}, {-10, 73}},			/* 444 */
	{{-9,  67}, {-5,  62}, {-14, 72}, {-10, 70}},			/* 445 */
	{{-1,  61}, {0,   57}, {-16, 67}, {-10, 69}},			/* 446 */
	{{-8,  66}, {-4,  61}, {-8,  53}, {-5,  66}},			/* 447 */
	{{-14, 66}, {-9,  60}, {-14, 59}, {-9,  64}},			/* 448 */
	{{0,   59}, {1,   54}, {-9,  52}, {-5,  58}},			/* 449 */
	{{2,   59}, {2,   58}, {-11, 68}, {2,  	59}},			/* 450 */
	{{21, -13}, {17, -10}, {9,   -2}, {21, -10}},			/* 451 */
	{{33, -14}, {32, -13}, {30, -10}, {24, -11}},			/* 452 */
	{{39,  -7}, {42,  -9}, {31,  -4}, {28,  -8}},			/* 453 */
	{{46,  -2}, {49,  -5}, {33,  -1}, {28,  -1}},			/* 454 */
	{{51,   2}, {53,   0}, {33,   7}, {29,   3}},			/* 455 */
	{{60,   6}, {64,   3}, {31,  12}, {29,   9}},			/* 456 */
	{{61,  17}, {68,  10}, {37,  23}, {35,  20}},			/* 457 */
	{{55,  34}, {66,  27}, {31,  38}, {29,  36}},			/* 458 */
	{{42,  62}, {47,  57}, {20,  64}, {14,  67}}			/* 459 */
};

/* ------------------------------------------------------------------------ */
/* NAME:		I_MB_Binarisation											*/
/* DESCRIPTION:	Contains the binarisation for MB types in I slices
				zero value means not a valid bitstring
				otherwise conains the value of the MB + 1
				Indexed by value, length-1									*/
/* ------------------------------------------------------------------------ */
const int I_MB_Binarisation[96][7] = 
{
	{1, 0, 0, 0, 0, 0, 0},		// bin string value = 0
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 1
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 2
	{0, 26, 0, 0, 0, 0, 0},		// bin string value = 3
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 4
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 5
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 6
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 7
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 8
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 9
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 10
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 11
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 12
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 13
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 14
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 15
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 16
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 17
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 18
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 19
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 20
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 21
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 22
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 23
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 24
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 25
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 26
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 27
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 28
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 29
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 30
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 31
	{0, 0, 0, 0, 0, 2, 0},		// bin string value = 32
	{0, 0, 0, 0, 0, 3, 0},		// bin string value = 33
	{0, 0, 0, 0, 0, 4, 0},		// bin string value = 34
	{0, 0, 0, 0, 0, 5, 0},		// bin string value = 35
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 36
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 37
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 38
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 39
	{0, 0, 0, 0, 0, 14, 0},		// bin string value = 40
	{0, 0, 0, 0, 0, 15, 0},		// bin string value = 41
	{0, 0, 0, 0, 0, 16, 0},		// bin string value = 42
	{0, 0, 0, 0, 0, 17, 0},		// bin string value = 43
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 44
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 45
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 46
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 47
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 48
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 49
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 50
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 51
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 52
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 53
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 54
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 55
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 56
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 57
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 58
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 59
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 60
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 61
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 62
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 63
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 64
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 65
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 66
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 67
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 68
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 69
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 70
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 71
	{0, 0, 0, 0, 0, 0, 6},		// bin string value = 72
	{0, 0, 0, 0, 0, 0, 7},		// bin string value = 73
	{0, 0, 0, 0, 0, 0, 8},		// bin string value = 74
	{0, 0, 0, 0, 0, 0, 9},		// bin string value = 75
	{0, 0, 0, 0, 0, 0, 10},		// bin string value = 76
	{0, 0, 0, 0, 0, 0, 11},		// bin string value = 77
	{0, 0, 0, 0, 0, 0, 12},		// bin string value = 78
	{0, 0, 0, 0, 0, 0, 13},		// bin string value = 79
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 80
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 81
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 82
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 83
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 84
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 85
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 86
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 87
	{0, 0, 0, 0, 0, 0, 18},		// bin string value = 88
	{0, 0, 0, 0, 0, 0, 19},		// bin string value = 89
	{0, 0, 0, 0, 0, 0, 20},		// bin string value = 90
	{0, 0, 0, 0, 0, 0, 21},		// bin string value = 91
	{0, 0, 0, 0, 0, 0, 22},		// bin string value = 92
	{0, 0, 0, 0, 0, 0, 23},		// bin string value = 93
	{0, 0, 0, 0, 0, 0, 24},		// bin string value = 94
	{0, 0, 0, 0, 0, 0, 25}		// bin string value = 95
};

/* ------------------------------------------------------------------------ */
/* NAME:		P_MB_Binarisation											*/
/* DESCRIPTION:	Contains the binarisation for MB types in P and SP slices
				zero value means not a valid bitstring
				otherwise conains the value of the MB + 1
				Indexed by bin string value, bin string length-1			*/
/* ------------------------------------------------------------------------ */
const int P_MB_Binarisation[4][3] = 
{
	{0, 0, 1},		// bin string value = 0
	{6, 0, 4},		// bin string value = 1
	{0, 0, 3},		// bin string value = 2
	{0, 0, 2}		// bin string value = 3
};

/* ------------------------------------------------------------------------ */
/* NAME:		B_MB_Binarisation											*/
/* DESCRIPTION:	Contains the binarisation for MB types in P and SP slices
				zero value means not a valid bitstring
				otherwise conains the value of the MB + 1
				Indexed by bin string value, bin string length-1			*/
/* ------------------------------------------------------------------------ */
const int B_MB_Binarisation[122][7] = 
{
	{1, 0, 0, 0, 0, 0, 0},		// bin string value = 0
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 1
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 2
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 3
	{0, 0, 2, 0, 0, 0, 0},		// bin string value = 4
	{0, 0, 3, 0, 0, 0, 0},		// bin string value = 5
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 6
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 7
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 8
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 9
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 0
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 11
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 12
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 13
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 14
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 15
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 16
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 17
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 18
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 19
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 20
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 21
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 22
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 23
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 24
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 25
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 26
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 27
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 28
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 29
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 30
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 31
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 32
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 33
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 34
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 35
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 36
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 37
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 38
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 39
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 40
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 41
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 42
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 43
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 44
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 45
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 46
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 47
	{0, 0, 0, 0, 0, 4, 0},		// bin string value = 48
	{0, 0, 0, 0, 0, 5, 0},		// bin string value = 49
	{0, 0, 0, 0, 0, 6, 0},		// bin string value = 50
	{0, 0, 0, 0, 0, 7, 0},		// bin string value = 51
	{0, 0, 0, 0, 0, 8, 0},		// bin string value = 52
	{0, 0, 0, 0, 0, 9, 0},		// bin string value = 53
	{0, 0, 0, 0, 0,10, 0},		// bin string value = 54
	{0, 0, 0, 0, 0,11, 0},		// bin string value = 55
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 56
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 57
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 58
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 59
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 60
	{0, 0, 0, 0, 0,24, 0},		// bin string value = 61
	{0, 0, 0, 0, 0,12, 0},		// bin string value = 62
	{0, 0, 0, 0, 0,23, 0},		// bin string value = 63
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 64
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 65
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 66
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 67
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 68
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 69
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 70
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 71
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 72
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 73
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 74
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 75
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 76
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 77
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 78
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 79
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 80
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 81
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 82
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 83
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 84
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 85
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 86
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 87
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 88
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 89
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 90
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 91
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 92
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 93
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 94
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 95
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 96
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 97
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 98
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 99
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 100
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 101
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 102
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 103
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 104
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 105
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 106
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 107
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 108
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 109
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 110
	{0, 0, 0, 0, 0, 0, 0},		// bin string value = 111
	{0, 0, 0, 0, 0, 0,13},		// bin string value = 112
	{0, 0, 0, 0, 0, 0,14},		// bin string value = 113
	{0, 0, 0, 0, 0, 0,15},		// bin string value = 114
	{0, 0, 0, 0, 0, 0,16},		// bin string value = 115
	{0, 0, 0, 0, 0, 0,17},		// bin string value = 116
	{0, 0, 0, 0, 0, 0,18},		// bin string value = 117
	{0, 0, 0, 0, 0, 0,19},		// bin string value = 118
	{0, 0, 0, 0, 0, 0,20},		// bin string value = 119
	{0, 0, 0, 0, 0, 0,21},		// bin string value = 120
	{0, 0, 0, 0, 0, 0,22}		// bin string value = 121
};
/* ------------------------------------------------------------------------ */
/* NAME:		P_MB_Subtype_Binarisation									*/
/* DESCRIPTION:	Contains the binarisation for MB subtypes in P and SP slices
				zero value means not a valid bitstring
				otherwise conains the value of the MB + 1
				Indexed by bin string value, bin string length-1			*/
/* ------------------------------------------------------------------------ */
const int P_MB_Subtype_Binarisation[4][3] = 
{
	{0, 2, 0},		// bin string value = 0
	{1, 0, 0},		// bin string value = 1
	{0, 0, 4},		// bin string value = 2
	{0, 0, 3}		// bin string value = 3
};

/* ------------------------------------------------------------------------ */
/* NAME:		B_MB_Subtype_Binarisation									*/
/* DESCRIPTION:	Contains the binarisation for MB subtypes in B slices
				zero value means not a valid bitstring
				otherwise conains the value of the MB + 1
				Indexed by bin string value, bin string length-1			*/
/* ------------------------------------------------------------------------ */
const int B_MB_Subtype_Binarisation[60][6] = 
{
	{1, 0, 0, 0, 0, 0},		// bin string value = 0
	{0, 0, 0, 0, 0, 0},		// bin string value = 1
	{0, 0, 0, 0, 0, 0},		// bin string value = 2
	{0, 0, 0, 0, 0, 0},		// bin string value = 3
	{0, 0, 2, 0, 0, 0},		// bin string value = 4
	{0, 0, 3, 0, 0, 0},		// bin string value = 5
	{0, 0, 0, 0, 0, 0},		// bin string value = 6
	{0, 0, 0, 0, 0, 0},		// bin string value = 7
	{0, 0, 0, 0, 0, 0},		// bin string value = 8
	{0, 0, 0, 0, 0, 0},		// bin string value = 9
	{0, 0, 0, 0, 0, 0},		// bin string value = 0
	{0, 0, 0, 0, 0, 0},		// bin string value = 11
	{0, 0, 0, 0, 0, 0},		// bin string value = 12
	{0, 0, 0, 0, 0, 0},		// bin string value = 13
	{0, 0, 0, 0, 0, 0},		// bin string value = 14
	{0, 0, 0, 0, 0, 0},		// bin string value = 15
	{0, 0, 0, 0, 0, 0},		// bin string value = 16
	{0, 0, 0, 0, 0, 0},		// bin string value = 17
	{0, 0, 0, 0, 0, 0},		// bin string value = 18
	{0, 0, 0, 0, 0, 0},		// bin string value = 19
	{0, 0, 0, 0, 0, 0},		// bin string value = 20
	{0, 0, 0, 0, 0, 0},		// bin string value = 21
	{0, 0, 0, 0, 0, 0},		// bin string value = 22
	{0, 0, 0, 0, 0, 0},		// bin string value = 23
	{0, 0, 0, 0, 4, 0},		// bin string value = 24
	{0, 0, 0, 0, 5, 0},		// bin string value = 25
	{0, 0, 0, 0, 6, 0},		// bin string value = 26
	{0, 0, 0, 0, 7, 0},		// bin string value = 27
	{0, 0, 0, 0, 0, 0},		// bin string value = 28
	{0, 0, 0, 0, 0, 0},		// bin string value = 29
	{0, 0, 0, 0, 12,0},		// bin string value = 30
	{0, 0, 0, 0, 13,0},		// bin string value = 31
	{0, 0, 0, 0, 0, 0},		// bin string value = 32
	{0, 0, 0, 0, 0, 0},		// bin string value = 33
	{0, 0, 0, 0, 0, 0},		// bin string value = 34
	{0, 0, 0, 0, 0, 0},		// bin string value = 35
	{0, 0, 0, 0, 0, 0},		// bin string value = 36
	{0, 0, 0, 0, 0, 0},		// bin string value = 37
	{0, 0, 0, 0, 0, 0},		// bin string value = 38
	{0, 0, 0, 0, 0, 0},		// bin string value = 39
	{0, 0, 0, 0, 0, 0},		// bin string value = 40
	{0, 0, 0, 0, 0, 0},		// bin string value = 41
	{0, 0, 0, 0, 0, 0},		// bin string value = 42
	{0, 0, 0, 0, 0, 0},		// bin string value = 43
	{0, 0, 0, 0, 0, 0},		// bin string value = 44
	{0, 0, 0, 0, 0, 0},		// bin string value = 45
	{0, 0, 0, 0, 0, 0},		// bin string value = 46
	{0, 0, 0, 0, 0, 0},		// bin string value = 47
	{0, 0, 0, 0, 0, 0},		// bin string value = 48
	{0, 0, 0, 0, 0, 0},		// bin string value = 49
	{0, 0, 0, 0, 0, 0},		// bin string value = 50
	{0, 0, 0, 0, 0, 0},		// bin string value = 51
	{0, 0, 0, 0, 0, 0},		// bin string value = 52
	{0, 0, 0, 0, 0, 0},		// bin string value = 53
	{0, 0, 0, 0, 0, 0},		// bin string value = 54
	{0, 0, 0, 0, 0, 0},		// bin string value = 55
	{0, 0, 0, 0, 0, 8},		// bin string value = 56
	{0, 0, 0, 0, 0, 9},		// bin string value = 57
	{0, 0, 0, 0, 0,10},		// bin string value = 58
	{0, 0, 0, 0, 0,11}		// bin string value = 59
};

#endif // def __CABAC__
#ifdef I16K_D8K
#pragma Code()
#endif
/*
--------------------------------------------------------------------------------
End of file.
--------------------------------------------------------------------------------
*/
